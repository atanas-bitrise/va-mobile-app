"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8176],{32666:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(67294),o=n(97405),r=n(22808),i=n(30433),s=n(41284),l=n(36005);const m=e=>{let{props:t}=e;return t?a.createElement(a.Fragment,null,l.ZP.isEmpty(t)?a.createElement("pre",{className:"preText"},"This component does not have props defined"):a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Name"),a.createElement("th",null,"Type"),a.createElement("th",null,"Default Value"),a.createElement("th",null,"Required"),a.createElement("th",null,"Description"))),a.createElement("tbody",null,Object.keys(t).map((e=>a.createElement("tr",{key:e},a.createElement("td",null,a.createElement("code",null,e)),a.createElement("td",{style:{minWidth:200}},t[e].type?.name),a.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),a.createElement("td",null,t[e].required?"Yes":"No"),a.createElement("td",null,t[e].description))))))):null};function c(e){const t=(0,s.N)(e.componentName),{description:n,displayName:l,props:c}=t[0],p=`How to use the ${l} component`,u=`Full code for the ${l} component`;return a.createElement(a.Fragment,null,n,a.createElement("br",null),a.createElement("br",null),a.createElement(r.Z,null,a.createElement(i.Z,{value:"props",label:"Properties"},a.createElement(m,{props:c})),a.createElement(i.Z,{value:"example",label:"Example"},e.example&&a.createElement(o.Z,{title:p,className:"language-tsx test"},e.example)),a.createElement(i.Z,{value:"code",label:"Source Code"},e.codeString&&a.createElement(o.Z,{title:u,className:"language-tsx"},e.codeString)),a.createElement(i.Z,{value:"accessibility",label:"Accessibility"},a.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,t,n)=>{n.d(t,{N:()=>o});var a=n(52426);const o=e=>(0,a.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},32446:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>b,exampleString:()=>u,frontMatter:()=>s,metadata:()=>m,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));n(8209),n(97405);const r='import React, { FC, ReactNode } from \'react\'\nimport { useTranslation } from \'react-i18next\'\nimport { Pressable } from \'react-native\'\nimport { ImagePickerResponse } from \'react-native-image-picker/src/types\'\n\nimport { Button, ButtonVariants } from \'@department-of-veterans-affairs/mobile-component-library\'\nimport _ from \'underscore\'\n\nimport { Box, TextView, VAIcon } from \'components/index\'\nimport { NAMESPACE } from \'constants/namespaces\'\nimport { DocumentPickerResponse } from \'screens/BenefitsScreen/BenefitsStackScreens\'\nimport { getFileDisplay } from \'utils/common\'\nimport { useTheme } from \'utils/hooks\'\n\nexport type FormAttachmentsProps = {\n  /** callback called on click of remove link for an attachment */\n  removeOnPress?: (attachment: ImagePickerResponse | DocumentPickerResponse) => void\n  /**button label */\n  buttonLabel?: string\n  /**button onPress */\n  buttonPress?: () => void\n  /** list of current attachments */\n  attachmentsList?: Array<ImagePickerResponse | DocumentPickerResponse>\n}\n\n/** A common component for form attachments, displays Attachments heading with helper link,\n * already attached items with remove option, and an optional large button. */\nconst FormAttachments: FC<FormAttachmentsProps> = ({ removeOnPress, buttonLabel, buttonPress, attachmentsList }) => {\n  const theme = useTheme()\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const { t: tFunction } = useTranslation()\n\n  const renderFileNames = (): ReactNode => {\n    return _.map(attachmentsList || [], (attachment, index) => {\n      const { fileName, fileSize: formattedFileSize, fileSizeA11y } = getFileDisplay(attachment, tFunction, true)\n      const text = [fileName, formattedFileSize].join(\' \').trim()\n\n      return (\n        <Box\n          display="flex"\n          flexDirection="row"\n          justifyContent="space-between"\n          alignItems="center"\n          flexWrap="wrap"\n          mt={index !== 0 ? theme.dimensions.condensedMarginBetween : 0}\n          key={index}>\n          <Box display="flex" flexDirection="row" alignItems="center" flexWrap="wrap" justifyContent="space-between">\n            <VAIcon name="PaperClip" width={16} height={16} fill="spinner" />\n            <TextView\n              variant="MobileBodyBold"\n              ml={theme.dimensions.textIconMargin}\n              accessibilityLabel={fileSizeA11y ? [fileName, fileSizeA11y].join(\' \').trim() : undefined}>\n              {text}\n            </TextView>\n          </Box>\n\n          <Pressable\n            onPress={() => (removeOnPress ? removeOnPress(attachment) : {})}\n            accessible={true}\n            accessibilityRole="link"\n            accessibilityHint={t(\'remove.a11yHint\', { content: fileName })}\n            accessibilityLabel={t(\'remove\')}>\n            <Box display="flex" flexDirection="row" alignItems="center" minHeight={theme.dimensions.touchableMinHeight}>\n              <VAIcon name="Remove" {...iconProps} />\n              <TextView\n                variant="HelperText"\n                ml={theme.dimensions.textIconMargin}\n                color="link"\n                textDecoration="underline"\n                textDecorationColor="link">\n                {t(\'remove\')}\n              </TextView>\n            </Box>\n          </Pressable>\n        </Box>\n      )\n    })\n  }\n\n  const iconProps = {\n    width: 16,\n    height: 16,\n    fill: \'link\',\n    fill2: theme.colors.icon.transparent,\n  }\n\n  const attachmentsDoNotExist = !attachmentsList || attachmentsList.length === 0\n\n  return (\n    <Box>\n      <TextView>{t(\'attachments\')}</TextView>\n      <Box\n        mt={theme.dimensions.standardMarginBetween}\n        mb={attachmentsDoNotExist ? 0 : theme.dimensions.standardMarginBetween}>\n        {renderFileNames()}\n      </Box>\n      {buttonLabel && buttonPress && (\n        <Button\n          label={buttonLabel}\n          onPress={buttonPress}\n          buttonType={ButtonVariants.Secondary}\n          a11yLabel={buttonLabel}\n        />\n      )}\n    </Box>\n  )\n}\n\nexport default FormAttachments\n';var i=n(32666);const s={},l=void 0,m={unversionedId:"Flagship design library/Components/Selection and Input/Form Elements/FormAttachments",id:"Flagship design library/Components/Selection and Input/Form Elements/FormAttachments",title:"FormAttachments",description:"",source:"@site/docs/Flagship design library/Components/Selection and Input/Form Elements/FormAttachments.mdx",sourceDirName:"Flagship design library/Components/Selection and Input/Form Elements",slug:"/Flagship design library/Components/Selection and Input/Form Elements/FormAttachments",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/FormAttachments",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Checkbox",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/Checkbox"},next:{title:"FormWrapper",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/FormWrapper"}},c={},p=[],u="<FormAttachments \nattachmentsList={[ { name: 'file.txt' }, { fileName: 'image.jpeg' } ]} \nremoveOnPress={() => {}} \nlargeButtonProps={{ label: 'add files', onPress: () => {} }} />",d={toc:p,exampleString:u},h="wrapper";function b(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.Z,{componentName:"FormAttachments",example:u,codeString:r,mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);