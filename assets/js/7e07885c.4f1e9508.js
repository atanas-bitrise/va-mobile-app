"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2672],{16360:(e,n,t)=>{t.d(n,{A:()=>c});var s=t(96540),a=t(54610),r=t(3384),o=t(31347),l=t(28057),m=t(84476);const i=e=>{let{props:n}=e;return n?s.createElement(s.Fragment,null,m.Ay.isEmpty(n)?s.createElement("pre",{className:"preText"},"This component does not have param defined"):s.createElement("table",null,s.createElement("thead",null,s.createElement("tr",null,s.createElement("th",null,"Param / Return"),s.createElement("th",null,"Description"))),s.createElement("tbody",null,Object.keys(n).map((e=>s.createElement("tr",{key:e},s.createElement("td",null,s.createElement("code",null,e)),s.createElement("td",null,"param"===e?n[e].split("\n").map(((e,n)=>{let t=e.split("-");return s.createElement("div",{key:n},s.createElement("code",null,t[0].trim()+":"),"\ufeff"+t[1])})):n[e]))))))):null};function c(e){const n=(0,l.d)(e.componentName),{description:t,displayName:m,tags:c}=n[0],d=`How to use the ${m} component`;return s.createElement(s.Fragment,null,s.createElement(r.A,null,s.createElement(o.A,{value:"description",label:"Description"},s.createElement("pre",{className:"preText"},t)),s.createElement(o.A,{value:"params",label:"Params and Return"},s.createElement(i,{props:c})),s.createElement(o.A,{value:"example",label:"Example"},e.example&&s.createElement(a.A,{title:d,className:"language-tsx test"},e.example))))}},28057:(e,n,t)=>{t.d(n,{d:()=>a});var s=t(2736);const a=e=>(0,s.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},54523:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>p,exampleString:()=>d,frontMatter:()=>o,metadata:()=>m,toc:()=>c});var s=t(58168),a=(t(96540),t(15680)),r=(t(41873),t(16360));const o={},l=void 0,m={unversionedId:"Engineering/FrontEnd/CustomHooks/useAutoScrollToElement",id:"Engineering/FrontEnd/CustomHooks/useAutoScrollToElement",title:"useAutoScrollToElement",description:"",source:"@site/docs/Engineering/FrontEnd/CustomHooks/useAutoScrollToElement.mdx",sourceDirName:"Engineering/FrontEnd/CustomHooks",slug:"/Engineering/FrontEnd/CustomHooks/useAutoScrollToElement",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useAutoScrollToElement",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useAttachments",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useAttachments"},next:{title:"useBeforeNavBackListener",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useBeforeNavBackListener"}},i={},c=[],d="const [scrollRef, messageRef, scrollToSelectedMessage] = useAutoScrollToElement()\n\nuseEffect(() => {\n    if (!loading && isTransitionComplete) {\n      scrollToSelectedMessage()\n    }\n}, [loading, isTransitionComplete, scrollToSelectedMessage])\n\nexport const renderMessages = (message: SecureMessagingMessageAttributes, messagesById: SecureMessagingMessageMap, thread: Array<number>, messageRef?: Ref<View>): ReactNode => {\n  const threadMessages = thread.map((messageID) => messagesById[messageID]).sort((message1, message2) => (message1.sentDate < message2.sentDate ? -1 : 1))\n  return threadMessages.map(\n    (m) =>\n      m &&\n      m.messageId && (\n        <CollapsibleMessage\n          key={m.messageId}\n          message={m}\n          isInitialMessage={m.messageId === message.messageId}\n          collapsibleMessageRef={m.messageId === message.messageId ? messageRef : undefined}\n        />\n      ),\n  )\n}\n\nreturn (\n<>\n    <VAScrollView {...testIdProps('ViewMessage-page')} scrollViewRef={scrollRef}>\n    <Box mt={theme.dimensions.standardMarginBetween} mb={theme.dimensions.condensedMarginBetween}>\n        <Box borderColor={'primary'} borderBottomWidth={'default'} p={theme.dimensions.cardPadding}>\n        <TextView variant=\"BitterBoldHeading\" accessibilityRole={'header'}>\n            {formatSubject(category, subject, t)}\n        </TextView>\n        </Box>\n        {renderMessages(message, messagesById, thread, messageRef)}\n    </Box>\n    {replyExpired && (\n        <Box mt={theme.dimensions.standardMarginBetween} mx={theme.dimensions.gutter} mb={theme.dimensions.contentMarginBottom}>\n        <AlertWithHaptics variant={'warning'} header={t('secureMessaging.reply.youCanNoLonger')} description={t('secureMessaging.reply.olderThan45Days')}>\n            <Box mt={theme.dimensions.standardMarginBetween}>\n            <Button\n                label={t('secureMessaging.startNewMessage.new')}\n                onPress={onPressCompose}\n                a11yHint={t('secureMessaging.startNewMessage.new.a11yHint')}\n            />\n            </Box>\n        </AlertWithHaptics>\n        </Box>\n    )}\n    </VAScrollView>\n    {!replyExpired && <ReplyMessageButton messageID={messageID} />}\n</>\n)",g={toc:c,exampleString:d},u="wrapper";function p(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,s.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)(r.A,{componentName:"useAutoScrollToElement",example:d,mdxType:"HooksInfo"}))}p.isMDXComponent=!0}}]);