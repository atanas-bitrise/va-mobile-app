"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9818],{32666:(e,n,t)=>{t.d(n,{Z:()=>d});var i=t(67294),o=t(97405),a=t(22808),r=t(30433),l=t(41284),s=t(36005);const c=e=>{let{props:n}=e;return n?i.createElement(i.Fragment,null,s.ZP.isEmpty(n)?i.createElement("pre",{className:"preText"},"This component does not have props defined"):i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Name"),i.createElement("th",null,"Type"),i.createElement("th",null,"Default Value"),i.createElement("th",null,"Required"),i.createElement("th",null,"Description"))),i.createElement("tbody",null,Object.keys(n).map((e=>i.createElement("tr",{key:e},i.createElement("td",null,i.createElement("code",null,e)),i.createElement("td",{style:{minWidth:200}},n[e].type?.name),i.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),i.createElement("td",null,n[e].required?"Yes":"No"),i.createElement("td",null,n[e].description))))))):null};function d(e){const n=(0,l.N)(e.componentName),{description:t,displayName:s,props:d}=n[0],m=`How to use the ${s} component`,p=`Full code for the ${s} component`;return i.createElement(i.Fragment,null,t,i.createElement("br",null),i.createElement("br",null),i.createElement(a.Z,null,i.createElement(r.Z,{value:"props",label:"Properties"},i.createElement(c,{props:d})),i.createElement(r.Z,{value:"example",label:"Example"},e.example&&i.createElement(o.Z,{title:m,className:"language-tsx test"},e.example)),i.createElement(r.Z,{value:"code",label:"Source Code"},e.codeString&&i.createElement(o.Z,{title:p,className:"language-tsx"},e.codeString)),i.createElement(r.Z,{value:"accessibility",label:"Accessibility"},i.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,n,t)=>{t.d(n,{N:()=>o});var i=t(52426);const o=e=>(0,i.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},14476:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,exampleString:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>m});var i=t(87462),o=(t(67294),t(3905));t(8209),t(97405);const a="import React, { FC } from 'react'\nimport { ViewStyle } from 'react-native'\n\nimport LottieView from 'lottie-react-native'\n\nimport { Box, TextView, VAScrollView } from 'components'\nimport colors from 'styles/themes/VAColors'\nimport { useTheme } from 'utils/hooks'\n\nexport type LoadingComponentProps = {\n  /** Text to be shown under the spinner */\n  text?: string\n  /** AccessibilityLabel for the text */\n  a11yLabel?: string\n  /** Param to show the spinner icon only and not the full page with text */\n  justTheSpinnerIcon?: boolean\n  /** Param to show the spinner with text, but no box */\n  inlineSpinner?: boolean\n  /** spinner height*/\n  spinnerHeight?: number\n  /** spinner width */\n  spinnerWidth?: number\n  /** Hex string to set the spinner color*/\n  spinnerColor?: string\n}\n\n/**A common component to show a loading spinner */\nconst LoadingComponent: FC<LoadingComponentProps> = ({\n  text,\n  a11yLabel,\n  justTheSpinnerIcon,\n  spinnerHeight,\n  spinnerWidth,\n  spinnerColor,\n  inlineSpinner,\n}) => {\n  const theme = useTheme()\n\n  const scrollStyles: ViewStyle = {\n    flexGrow: 1,\n    justifyContent: 'center',\n  }\n\n  const spinnerStyle: ViewStyle = {\n    height: spinnerHeight || 50,\n    width: spinnerWidth || 50,\n    alignContent: 'center',\n  }\n\n  const getSpinner = () => {\n    return (\n      <LottieView\n        source={require('./va-spinner.json')}\n        autoPlay\n        loop\n        style={spinnerStyle}\n        speed={0.8}\n        colorFilters={[\n          {\n            keypath: 'Shape Layer 9',\n            color: spinnerColor || colors.primary,\n          },\n          {\n            keypath: 'Shape Layer 11',\n            color: spinnerColor || colors.primary,\n          },\n        ]}\n      />\n    )\n  }\n\n  return (\n    <>\n      {justTheSpinnerIcon ? (\n        <Box alignItems=\"center\" justifyContent=\"center\">\n          {getSpinner()}\n        </Box>\n      ) : inlineSpinner ? (\n        <Box\n          justifyContent=\"center\"\n          mx={theme.dimensions.gutter}\n          mt={theme.dimensions.contentMarginTop}\n          mb={theme.dimensions.contentMarginBottom}\n          alignItems={'center'}>\n          {getSpinner()}\n          <Box mt={theme.dimensions.condensedMarginBetween}>\n            <TextView textAlign={'center'} variant=\"MobileBody\" accessibilityLabel={a11yLabel}>\n              {text}\n            </TextView>\n          </Box>\n        </Box>\n      ) : (\n        <VAScrollView contentContainerStyle={scrollStyles}>\n          <Box\n            justifyContent=\"center\"\n            mx={theme.dimensions.gutter}\n            mt={theme.dimensions.contentMarginTop}\n            mb={theme.dimensions.contentMarginBottom}\n            alignItems={'center'}>\n            {getSpinner()}\n            <Box mt={theme.dimensions.condensedMarginBetween}>\n              <TextView textAlign={'center'} variant=\"MobileBody\" accessibilityLabel={a11yLabel}>\n                {text}\n              </TextView>\n            </Box>\n          </Box>\n        </VAScrollView>\n      )}\n    </>\n  )\n}\n\nexport default LoadingComponent\n";var r=t(32666);const l={title:"Loading indicator"},s=void 0,c={unversionedId:"Flagship design library/Components/Alerts and Progress/LoadingComponent",id:"Flagship design library/Components/Alerts and Progress/LoadingComponent",title:"Loading indicator",description:"A loading indicator provides a clue to ongoing activity when the site needs to load additional content.",source:"@site/docs/Flagship design library/Components/Alerts and Progress/LoadingComponent.mdx",sourceDirName:"Flagship design library/Components/Alerts and Progress",slug:"/Flagship design library/Components/Alerts and Progress/LoadingComponent",permalink:"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/LoadingComponent",draft:!1,tags:[],version:"current",frontMatter:{title:"Loading indicator"},sidebar:"tutorialSidebar",previous:{title:"Alert",permalink:"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/AlertBox"},next:{title:"MessageAlert",permalink:"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/MessageAlert"}},d={},m=[{value:"Examples",id:"examples",level:3},{value:"Default",id:"default",level:4},{value:"Variations",id:"variations",level:4},{value:"Usage",id:"usage",level:3},{value:"Content considerations",id:"content-considerations",level:3},{value:"Accessibility considerations",id:"accessibility-considerations",level:3},{value:"Related",id:"related",level:3},{value:"Code usage",id:"code-usage",level:3}],p="<LoadingComponent text={'secureMessaging.formMessage.saveDraft.loading'} />",g={toc:m,exampleString:p},u="wrapper";function h(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A loading indicator provides a clue to ongoing activity when the site needs to load additional content."),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("h4",{id:"default"},"Default"),(0,o.kt)("iframe",{width:"800",height:"450",alt:"Image of master component in Figma showing light and dark mode",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/file/UlUUAKULuL2peMxSvfY5wx/%5BNEW%5D-Loading-indicator?type=design&node-id=264-681&mode=design&t=xRDrqMxMbVbX50XK-4",allowfullscreen:!0}),(0,o.kt)("h4",{id:"variations"},"Variations"),(0,o.kt)("iframe",{width:"800",height:"450",alt:"Image of component examples in Figma",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/file/UlUUAKULuL2peMxSvfY5wx/%5BNEW%5D-Loading-indicator?type=design&node-id=264-673&mode=design&t=xRDrqMxMbVbX50XK-4",allowfullscreen:!0}),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://design.va.gov/components/loading-indicator"},"Refer to the VA Design System for usage guidance")),(0,o.kt)("h3",{id:"content-considerations"},"Content considerations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Refer to the ",(0,o.kt)("a",{parentName:"li",href:"https://design.va.gov/components/loading-indicator#content-considerations"},"VA Design System for content considerations"))),(0,o.kt)("h3",{id:"accessibility-considerations"},"Accessibility considerations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Refer to the ",(0,o.kt)("a",{parentName:"li",href:"https://design.va.gov/components/loading-indicator#accessibility-considerations"},"VA Design System for accessibility considerations")),(0,o.kt)("li",{parentName:"ul"},'The loading indicator component is used to notify users that the page content is loading. On the website, W3C WAI-ARIA aria-live="polite", aria-label and aria-valuetext are used to ensure screen reader users are also provided the same information. On the mobile app, use the equivalent accessibility hints and labels in React Native.')),(0,o.kt)("h3",{id:"related"},"Related"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://design.va.gov/components/loading-indicator"},"Loading indicator - VA Design System")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.apple.com/design/human-interface-guidelines/progress-indicators"},"Progress indicator - HIG")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://m3.material.io/components/progress-indicators"},"Progress indicator - Material Design"))),(0,o.kt)("h3",{id:"code-usage"},"Code usage"),(0,o.kt)("p",null,"Link to Storybook coming soon"),(0,o.kt)(r.Z,{componentName:"LoadingComponent",example:p,codeString:a,mdxType:"ComponentTopInfo"}))}h.isMDXComponent=!0}}]);