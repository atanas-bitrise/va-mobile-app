"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2475],{32666:(e,n,t)=>{t.d(n,{Z:()=>u});var r=t(67294),o=t(97405),l=t(22808),a=t(30433),s=t(41284),i=t(36005);const p=e=>{let{props:n}=e;return n?r.createElement(r.Fragment,null,i.ZP.isEmpty(n)?r.createElement("pre",{className:"preText"},"This component does not have props defined"):r.createElement("table",null,r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Name"),r.createElement("th",null,"Type"),r.createElement("th",null,"Default Value"),r.createElement("th",null,"Required"),r.createElement("th",null,"Description"))),r.createElement("tbody",null,Object.keys(n).map((e=>r.createElement("tr",{key:e},r.createElement("td",null,r.createElement("code",null,e)),r.createElement("td",{style:{minWidth:200}},n[e].type?.name),r.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),r.createElement("td",null,n[e].required?"Yes":"No"),r.createElement("td",null,n[e].description))))))):null};function u(e){const n=(0,s.N)(e.componentName),{description:t,displayName:i,props:u}=n[0],d=`How to use the ${i} component`,c=`Full code for the ${i} component`;return r.createElement(r.Fragment,null,t,r.createElement("br",null),r.createElement("br",null),r.createElement(l.Z,null,r.createElement(a.Z,{value:"props",label:"Properties"},r.createElement(p,{props:u})),r.createElement(a.Z,{value:"example",label:"Example"},e.example&&r.createElement(o.Z,{title:d,className:"language-tsx test"},e.example)),r.createElement(a.Z,{value:"code",label:"Source Code"},e.codeString&&r.createElement(o.Z,{title:c,className:"language-tsx"},e.codeString)),r.createElement(a.Z,{value:"accessibility",label:"Accessibility"},r.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,n,t)=>{t.d(n,{N:()=>o});var r=t(52426);const o=e=>(0,r.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},77369:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>h,exampleString:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var r=t(87462),o=(t(67294),t(3905));t(8209),t(97405);const l="import React, { FC, ReactElement, RefObject, useEffect, useRef, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { KeyboardTypeOptions, TextInput, TextInputProps } from 'react-native'\n\nimport { useTheme } from 'utils/hooks'\nimport { isIOS } from 'utils/platform'\n\nimport { Box, BoxProps } from '../../index'\nimport {\n  getInputBorderColor,\n  getInputBorderWidth,\n  getInputWrapperProps,\n  removeInputErrorMessage,\n  renderInputError,\n  renderInputLabelSection,\n} from './formFieldUtils'\n\nexport type VATextInputTypes = 'none' | 'email' | 'phone'\n\nexport type VATextInputProps = {\n  /** Type of the input. Will determine the keyboard used */\n  inputType: VATextInputTypes\n  /** Initial value of the input. If blank it will show the placeholder */\n  value?: string\n  /** i18n key for the label */\n  labelKey?: string\n  /** Handle the change in input value */\n  onChange: (val: string) => void\n  /** Maximum length of the input */\n  maxLength?: number\n  /** Handle input once the user is done typing */\n  onEndEditing?: () => void\n  /** optional testID for the overall component */\n  testID?: string\n  /** optional ref value */\n  inputRef?: RefObject<TextInput>\n  /** optional boolean that displays required text next to label if set to true */\n  isRequiredField?: boolean\n  /** optional key for string to display underneath label */\n  helperTextKey?: string\n  /** optional callback to update the error message if there is an error */\n  setError?: (error?: string) => void\n  /** if this exists updates input styles to error state */\n  error?: string\n  /** optional boolean that when true displays a text area rather than a single line text input */\n  isTextArea?: boolean\n  /** optional boolean to set the cursor to the beginning of a string value */\n  setInputCursorToBeginning?: boolean\n}\n\n/**\n * Text input with a label\n */\nconst VATextInput: FC<VATextInputProps> = (props: VATextInputProps) => {\n  const {\n    inputType,\n    value,\n    labelKey,\n    onChange,\n    maxLength,\n    onEndEditing,\n    testID,\n    inputRef,\n    isRequiredField,\n    helperTextKey,\n    setError,\n    error,\n    isTextArea,\n    setInputCursorToBeginning,\n  } = props\n  const { t } = useTranslation()\n  const theme = useTheme()\n  const startTextPositon = { start: 0, end: 0 }\n  const [focusUpdated, setFocusUpdated] = useState(false)\n  const [isFocused, setIsFocused] = useState(false)\n  const [selection, setSelection] = useState<{ start: number; end?: number } | undefined>(\n    setInputCursorToBeginning ? startTextPositon : undefined,\n  )\n  const ref = useRef<TextInput>(null)\n\n  useEffect(() => {\n    removeInputErrorMessage(isFocused, error, setError, focusUpdated, setFocusUpdated)\n  }, [isFocused, error, setError, focusUpdated])\n\n  let textContentType: 'emailAddress' | 'telephoneNumber' | 'none' = 'none'\n  let keyboardType: KeyboardTypeOptions = 'default'\n\n  switch (inputType) {\n    case 'email': {\n      textContentType = 'emailAddress'\n      keyboardType = 'email-address'\n      break\n    }\n    case 'phone': {\n      textContentType = 'telephoneNumber'\n      keyboardType = isIOS() ? 'number-pad' : 'numeric'\n      break\n    }\n  }\n\n  const onBlur = (): void => {\n    setIsFocused(false)\n    setFocusUpdated(true)\n  }\n\n  const onFocus = () => {\n    setIsFocused(true)\n    if (setInputCursorToBeginning) {\n      setSelection(undefined)\n    }\n  }\n\n  const inputBorderWidth = getInputBorderWidth(theme, error, isFocused)\n  const textAreaHeight = 201\n\n  const inputProps: TextInputProps = {\n    value: value,\n    textContentType,\n    keyboardType,\n    maxLength,\n    disableFullscreenUI: true,\n    placeholderTextColor: theme.colors.text.placeholder,\n    textAlignVertical: isTextArea ? 'top' : undefined,\n    onChangeText: (newVal) => {\n      if ((newVal.length > 0 && keyboardType === 'number-pad') || keyboardType === 'numeric') {\n        onChange(newVal.replace(/\\D/g, ''))\n      } else {\n        onChange(newVal)\n      }\n    },\n    onEndEditing,\n    style: {\n      fontSize: theme.fontSizes.MobileBody.fontSize,\n      fontFamily: theme.fontFace.regular,\n      marginRight: 40,\n      color: isFocused ? theme.colors.text.inputFocused : theme.colors.text.input,\n      height: isTextArea ? textAreaHeight - inputBorderWidth * 2 : undefined,\n    },\n    onFocus,\n    onBlur,\n    selection,\n    multiline: isTextArea ? true : false,\n    testID,\n  }\n\n  const textAreaWrapperProps: BoxProps = {\n    backgroundColor: 'textBox',\n    height: textAreaHeight,\n    borderColor: getInputBorderColor(error, isFocused),\n    borderWidth: inputBorderWidth,\n    pl: 8,\n  }\n\n  const renderTextInput = (): ReactElement => {\n    const wrapperProps = isTextArea ? textAreaWrapperProps : getInputWrapperProps(theme, error, isFocused)\n\n    const textInputBox = (\n      <Box {...wrapperProps}>\n        <Box width=\"100%\">\n          <TextInput testID={testID} {...inputProps} ref={inputRef || ref} />\n        </Box>\n      </Box>\n    )\n\n    const content = (\n      <Box>\n        {labelKey && renderInputLabelSection(error, isRequiredField, labelKey, t, helperTextKey)}\n        {!!error && renderInputError(error)}\n        {textInputBox}\n      </Box>\n    )\n\n    return <Box>{content}</Box>\n  }\n\n  return renderTextInput()\n}\n\nexport default VATextInput\n";var a=t(32666);const s={},i=void 0,p={unversionedId:"Flagship design library/Components/Selection and Input/Form Elements/VATextInput",id:"Flagship design library/Components/Selection and Input/Form Elements/VATextInput",title:"VATextInput",description:"",source:"@site/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput.mdx",sourceDirName:"Flagship design library/Components/Selection and Input/Form Elements",slug:"/Flagship design library/Components/Selection and Input/Form Elements/VATextInput",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VATextInput",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"VASelector",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/VASelector"},next:{title:"Pickers",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Pickers/"}},u={},d=[],c="<VATextInput \ninputType={'email'} \nvalue={selected} \nonChange={(textValue) => { setSelected(textValue) }} \nisTextArea={false}/>",m={toc:d,exampleString:c},x="wrapper";function h(e){let{components:n,...t}=e;return(0,o.kt)(x,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(a.Z,{componentName:"VATextInput",example:c,codeString:l,mdxType:"ComponentTopInfo"}))}h.isMDXComponent=!0}}]);