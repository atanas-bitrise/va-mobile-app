"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5611],{32666:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(67294),o=n(97405),r=n(22808),i=n(30433),l=n(41284),s=n(36005);const c=e=>{let{props:t}=e;return t?a.createElement(a.Fragment,null,s.ZP.isEmpty(t)?a.createElement("pre",{className:"preText"},"This component does not have props defined"):a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Name"),a.createElement("th",null,"Type"),a.createElement("th",null,"Default Value"),a.createElement("th",null,"Required"),a.createElement("th",null,"Description"))),a.createElement("tbody",null,Object.keys(t).map((e=>a.createElement("tr",{key:e},a.createElement("td",null,a.createElement("code",null,e)),a.createElement("td",{style:{minWidth:200}},t[e].type?.name),a.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),a.createElement("td",null,t[e].required?"Yes":"No"),a.createElement("td",null,t[e].description))))))):null};function m(e){const t=(0,l.N)(e.componentName),{description:n,displayName:s,props:m}=t[0],d=`How to use the ${s} component`,u=`Full code for the ${s} component`;return a.createElement(a.Fragment,null,n,a.createElement("br",null),a.createElement("br",null),a.createElement(r.Z,null,a.createElement(i.Z,{value:"props",label:"Properties"},a.createElement(c,{props:m})),a.createElement(i.Z,{value:"example",label:"Example"},e.example&&a.createElement(o.Z,{title:d,className:"language-tsx test"},e.example)),a.createElement(i.Z,{value:"code",label:"Source Code"},e.codeString&&a.createElement(o.Z,{title:u,className:"language-tsx"},e.codeString)),a.createElement(i.Z,{value:"accessibility",label:"Accessibility"},a.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,t,n)=>{n.d(t,{N:()=>o});var a=n(52426);const o=e=>(0,a.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},90146:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>b,exampleString:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));n(8209),n(97405);const r="import React, { FC } from 'react'\nimport ContentLoader, { Rect } from 'react-content-loader/native'\nimport { useTranslation } from 'react-i18next'\nimport { Platform, Pressable, PressableStateCallbackType, ViewStyle } from 'react-native'\n\nimport { Box, TextView, VAIcon } from 'components'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { a11yHintProp } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\n\nimport colors from '../styles/themes/VAColors'\n\nconst SkeletonLoader = () => {\n  const theme = useTheme()\n  return (\n    <ContentLoader\n      backgroundColor={theme.colors.background.skeletonLoader}\n      foregroundColor={theme.colors.background.skeletonLoaderSecondary}\n      speed={0.6}\n      width=\"150\"\n      height=\"10\">\n      <Rect width=\"100%\" height=\"25\" />\n    </ContentLoader>\n  )\n}\n\ninterface HomeNavButtonProps {\n  /**string for header and used to create testID for accessibility*/\n  title: string\n  /**string secondary text that seats on the second row */\n  subText?: string\n  /**a11y string secondary text that seats on the second row */\n  subTextA11yLabel?: string\n  /**string for accessibility hint */\n  a11yHint?: string\n  /**function to be called when press occurs */\n  onPress: () => void\n  /** Show loading animation in place of subtext */\n  showLoading?: boolean\n  /** Optional test ID for button */\n  testID?: string\n}\n\n/**\n * Reusable large navigation button\n * @returns LargeNavButton component\n */\nconst LargeNavButton: FC<HomeNavButtonProps> = ({\n  title,\n  subText,\n  a11yHint,\n  onPress,\n  showLoading,\n}: HomeNavButtonProps) => {\n  const theme = useTheme()\n  const { t } = useTranslation(NAMESPACE.COMMON)\n\n  const pressableStyle = ({ pressed }: PressableStateCallbackType): ViewStyle => ({\n    width: '100%',\n    backgroundColor: pressed ? theme.colors.background.listActive : theme.colors.background.textBox,\n    paddingVertical: theme.dimensions.cardPadding,\n    paddingHorizontal: theme.dimensions.buttonPadding,\n    marginBottom: theme.dimensions.condensedMarginBetween,\n    shadowColor: colors.black,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n      },\n      android: {\n        elevation: 2,\n      },\n    }),\n  })\n\n  const accessibilityLabel = `${title} ${showLoading ? t('loadingActivity') : subText || ''}`.trim()\n\n  return (\n    <Pressable\n      style={pressableStyle}\n      onPress={onPress}\n      accessible={true}\n      accessibilityRole={'link'}\n      testID={title}\n      accessibilityLabel={accessibilityLabel}\n      {...a11yHintProp(a11yHint || '')}>\n      <Box flexDirection=\"row\">\n        <Box flex={1}>\n          <TextView variant=\"LargeNavButton\">{title}</TextView>\n          {showLoading ? (\n            <TextView mt={30} flexDirection={'row'}>\n              <SkeletonLoader />\n            </TextView>\n          ) : subText ? (\n            <TextView mt={20} variant={'LargeNavSubtext'}>\n              {subText}\n            </TextView>\n          ) : (\n            <></>\n          )}\n        </Box>\n        <VAIcon\n          flexDirection=\"row\"\n          alignItems=\"flex-end\"\n          width={24}\n          height={24}\n          name=\"RightArrowInCircle\"\n          fill={theme.colors.icon.largeNavButton}\n          fill2={theme.colors.icon.transparent}\n          ml={theme.dimensions.listItemDecoratorMarginLeft}\n          preventScaling={true}\n        />\n      </Box>\n    </Pressable>\n  )\n}\n\nexport default LargeNavButton\n";var i=n(32666);const l={},s=void 0,c={unversionedId:"Flagship design library/Components/Layout and Organization/LargeNavButton",id:"Flagship design library/Components/Layout and Organization/LargeNavButton",title:"LargeNavButton",description:"",source:"@site/docs/Flagship design library/Components/Layout and Organization/LargeNavButton.mdx",sourceDirName:"Flagship design library/Components/Layout and Organization",slug:"/Flagship design library/Components/Layout and Organization/LargeNavButton",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/LargeNavButton",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CollapsibleView",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/CollapsibleView"},next:{title:"List",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/"}},m={},d=[],u=" <LargeNavButton\n title={'appointments.title'}\n subText={'appointments.subText'}\n a11yHint={'appointments.a11yHint'}\n onPress={() => {}}\n/>",p={toc:d,exampleString:u},g="wrapper";function b(e){let{components:t,...n}=e;return(0,o.kt)(g,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.Z,{componentName:"LargeNavButton",example:u,codeString:r,mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);