"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5611],{32666:(e,n,t)=>{t.d(n,{Z:()=>m});var o=t(67294),a=t(97405),r=t(22808),i=t(30433),s=t(41284),l=t(36005);const c=e=>{let{props:n}=e;return n?o.createElement(o.Fragment,null,l.ZP.isEmpty(n)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(n).map((e=>o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},n[e].type?.name),o.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),o.createElement("td",null,n[e].required?"Yes":"No"),o.createElement("td",null,n[e].description))))))):null};function m(e){const n=(0,s.N)(e.componentName),{description:t,displayName:l,props:m}=n[0],u=`How to use the ${l} component`,d=`Full code for the ${l} component`;return o.createElement(o.Fragment,null,t,o.createElement("br",null),o.createElement("br",null),o.createElement(r.Z,null,o.createElement(i.Z,{value:"props",label:"Properties"},o.createElement(c,{props:m})),o.createElement(i.Z,{value:"example",label:"Example"},e.example&&o.createElement(a.Z,{title:u,className:"language-tsx test"},e.example)),o.createElement(i.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(a.Z,{title:d,className:"language-tsx"},e.codeString)),o.createElement(i.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,n,t)=>{t.d(n,{N:()=>a});var o=t(52426);const a=e=>(0,o.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},90146:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>b,exampleString:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var o=t(87462),a=(t(67294),t(3905));t(8209),t(97405);const r="import React, { FC } from 'react'\nimport ContentLoader, { Rect } from 'react-content-loader/native'\nimport { useTranslation } from 'react-i18next'\nimport { Platform, Pressable, ViewStyle } from 'react-native'\n\nimport { Box, BoxProps, TextView, VAIcon } from 'components'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { a11yHintProp } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\n\nimport colors from '../styles/themes/VAColors'\n\nconst SkeletonLoader = () => {\n  const theme = useTheme()\n  return (\n    <ContentLoader\n      backgroundColor={theme.colors.background.skeletonLoader}\n      foregroundColor={theme.colors.background.skeletonLoaderSecondary}\n      speed={0.6}\n      width=\"150\"\n      height=\"10\">\n      <Rect width=\"100%\" height=\"25\" />\n    </ContentLoader>\n  )\n}\n\ninterface HomeNavButtonProps {\n  /**string for header and used to create testID for accessibility*/\n  title: string\n  /**string secondary text that seats on the second row */\n  subText?: string\n  /**a11y string secondary text that seats on the second row */\n  subTextA11yLabel?: string\n  /**string for accessibility hint */\n  a11yHint?: string\n  /**function to be called when press occurs */\n  onPress: () => void\n  /** Show loading animation in place of subtext */\n  showLoading?: boolean\n  /** Optional test ID for button */\n  testID?: string\n}\n\n/**\n * Reusable large navigation button\n * @returns LargeNavButton component\n */\nconst LargeNavButton: FC<HomeNavButtonProps> = ({\n  title,\n  subText,\n  a11yHint,\n  onPress,\n  showLoading,\n}: HomeNavButtonProps) => {\n  const theme = useTheme()\n  const { t } = useTranslation(NAMESPACE.COMMON)\n\n  const boxProps: BoxProps = {\n    py: theme.dimensions.cardPadding,\n    px: theme.dimensions.buttonPadding,\n    mb: theme.dimensions.condensedMarginBetween,\n    backgroundColor: 'textBox',\n    style: {\n      shadowColor: colors.black,\n      ...Platform.select({\n        ios: {\n          shadowOffset: { width: 0, height: 2 },\n          shadowOpacity: 0.1,\n        },\n        android: {\n          elevation: 2,\n        },\n      }),\n    },\n  }\n\n  const pressableStyles: ViewStyle = {\n    width: '100%',\n  }\n  const accessibilityLabel = `${title} ${showLoading ? t('loadingActivity') : subText || ''}`.trim()\n\n  return (\n    <Box {...boxProps}>\n      <Pressable\n        style={pressableStyles}\n        onPress={onPress}\n        accessible={true}\n        accessibilityRole={'link'}\n        testID={title}\n        accessibilityLabel={accessibilityLabel}\n        {...a11yHintProp(a11yHint || '')}>\n        <Box flexDirection=\"row\">\n          <Box flex={1}>\n            <TextView variant=\"LargeNavButton\">{title}</TextView>\n            {showLoading ? (\n              <TextView mt={30} flexDirection={'row'}>\n                <SkeletonLoader />\n              </TextView>\n            ) : subText ? (\n              <TextView mt={20} variant={'LargeNavSubtext'}>\n                {subText}\n              </TextView>\n            ) : (\n              <></>\n            )}\n          </Box>\n          <VAIcon\n            flexDirection=\"row\"\n            alignItems=\"flex-end\"\n            width={24}\n            height={24}\n            name=\"RightArrowInCircle\"\n            fill={theme.colors.icon.largeNavButton}\n            fill2={theme.colors.icon.transparent}\n            ml={theme.dimensions.listItemDecoratorMarginLeft}\n            preventScaling={true}\n          />\n        </Box>\n      </Pressable>\n    </Box>\n  )\n}\n\nexport default LargeNavButton\n";var i=t(32666);const s={},l=void 0,c={unversionedId:"Flagship design library/Components/Layout and Organization/LargeNavButton",id:"Flagship design library/Components/Layout and Organization/LargeNavButton",title:"LargeNavButton",description:"",source:"@site/docs/Flagship design library/Components/Layout and Organization/LargeNavButton.mdx",sourceDirName:"Flagship design library/Components/Layout and Organization",slug:"/Flagship design library/Components/Layout and Organization/LargeNavButton",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/LargeNavButton",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CollapsibleView",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/CollapsibleView"},next:{title:"List",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/"}},m={},u=[],d=" <LargeNavButton\n title={'appointments.title'}\n subText={'appointments.subText'}\n a11yHint={'appointments.a11yHint'}\n onPress={() => {}}\n/>",p={toc:u,exampleString:d},g="wrapper";function b(e){let{components:n,...t}=e;return(0,a.kt)(g,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{componentName:"LargeNavButton",example:d,codeString:r,mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);