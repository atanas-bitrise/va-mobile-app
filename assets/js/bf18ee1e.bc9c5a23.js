"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4716],{32666:(e,t,n)=>{n.d(t,{Z:()=>m});var o=n(67294),a=n(97405),r=n(22808),i=n(30433),s=n(41284),l=n(36005);const c=e=>{let{props:t}=e;return t?o.createElement(o.Fragment,null,l.ZP.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((e=>o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},t[e].type?.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))))))):null};function m(e){const t=(0,s.N)(e.componentName),{description:n,displayName:l,props:m}=t[0],p=`How to use the ${l} component`,u=`Full code for the ${l} component`;return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(r.Z,null,o.createElement(i.Z,{value:"props",label:"Properties"},o.createElement(c,{props:m})),o.createElement(i.Z,{value:"example",label:"Example"},e.example&&o.createElement(a.Z,{title:p,className:"language-tsx test"},e.example)),o.createElement(i.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(a.Z,{title:u,className:"language-tsx"},e.codeString)),o.createElement(i.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,t,n)=>{n.d(t,{N:()=>a});var o=n(52426);const a=e=>(0,o.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},54134:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>h,exampleString:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));n(8209),n(97405);const r="import React, { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { TouchableWithoutFeedback, TouchableWithoutFeedbackProps } from 'react-native'\n\nimport { NAMESPACE } from 'constants/namespaces'\nimport { VAIconColors, VATextColors } from 'styles/theme'\nimport { testIdProps } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\n\nimport Box, { BoxProps } from './Box'\nimport TextView from './TextView'\nimport VAIcon from './VAIcon'\n\nexport type CtaButtonProps = {\n  /** Optional param to set icon color */\n  iconColor?: keyof VAIconColors | keyof VATextColors | string\n  /** Function to run on press */\n  onPress?: () => void\n} & BoxProps\n\n/**\n * CtaButton that shows up on the HomeScreen' and 'Contact VA' option on HomeScreen\n *\n * @returns CtaButton component\n */\nconst CtaButton: FC<CtaButtonProps> = ({\n  onPress,\n  iconColor,\n  backgroundColor,\n  children,\n  px,\n  py,\n  alignItems,\n  justifyContent,\n  accessibilityLabel,\n}) => {\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n\n  const touchableProps: TouchableWithoutFeedbackProps = {\n    accessibilityRole: 'button',\n    accessible: true,\n  }\n\n  const boxProps: BoxProps = {\n    flexDirection: 'row',\n    justifyContent: justifyContent || 'center',\n    alignItems: alignItems || 'center',\n    width: '100%',\n    backgroundColor: backgroundColor || 'ctaButton',\n    minHeight: theme.dimensions.touchableMinHeight,\n    mb: theme.dimensions.standardMarginBetween,\n    py: py ?? theme.dimensions.buttonPadding,\n    px: px ?? theme.dimensions.cardPadding,\n  }\n\n  return (\n    <TouchableWithoutFeedback\n      onPress={onPress}\n      {...touchableProps}\n      {...testIdProps(accessibilityLabel || t('component.crisisLine.label'))}>\n      <Box {...boxProps}>\n        <TextView\n          variant=\"MobileBody\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          color=\"primaryContrast\"\n          mr={theme.dimensions.textIconMargin}>\n          {children}\n        </TextView>\n        <VAIcon\n          name=\"ChevronRight\"\n          fill={iconColor || theme.colors.icon.veteransCrisisLineArrow}\n          width={10}\n          height={15}\n        />\n      </Box>\n    </TouchableWithoutFeedback>\n  )\n}\n\nexport default CtaButton\n";var i=n(32666);const s={},l=void 0,c={unversionedId:"Flagship design library/Components/Buttons and Links/CtaButton",id:"Flagship design library/Components/Buttons and Links/CtaButton",title:"CtaButton",description:"",source:"@site/docs/Flagship design library/Components/Buttons and Links/CtaButton.mdx",sourceDirName:"Flagship design library/Components/Buttons and Links",slug:"/Flagship design library/Components/Buttons and Links/CtaButton",permalink:"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/CtaButton",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BackButton",permalink:"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/BackButton"},next:{title:"Menus",permalink:"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/Menus"}},m={},p=[],u='<CtaButton {...props}>\n    <TextView color="primaryContrast" variant="MobileBody">\n    {t(\'component.crisisLine.talkToThe\')}\n    </TextView>\n    <TextView color="primaryContrast" variant="MobileBodyBold">\n    &nbsp;{\'component.crisisLine.veteranCrisisLine\'}\n    </TextView>\n    <TextView color="primaryContrast" variant="MobileBody">\n    &nbsp;{\'component.crisisLine.now\'}\n    </TextView>\n</CtaButton>>',d={toc:p,exampleString:u},b="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(b,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{componentName:"CtaButton",example:u,codeString:r,mdxType:"ComponentTopInfo"}))}h.isMDXComponent=!0}}]);