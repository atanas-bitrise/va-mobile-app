"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4805],{7644:(e,t,n)=>{n.d(t,{A:()=>c});var s=n(96540),i=n(54610),a=n(3384),o=n(31347),r=n(28057),l=n(84476);const m=e=>{let{props:t}=e;return t?s.createElement(s.Fragment,null,l.Ay.isEmpty(t)?s.createElement("pre",{className:"preText"},"This component does not have props defined"):s.createElement("table",null,s.createElement("thead",null,s.createElement("tr",null,s.createElement("th",null,"Name"),s.createElement("th",null,"Type"),s.createElement("th",null,"Default Value"),s.createElement("th",null,"Required"),s.createElement("th",null,"Description"))),s.createElement("tbody",null,Object.keys(t).map((e=>s.createElement("tr",{key:e},s.createElement("td",null,s.createElement("code",null,e)),s.createElement("td",{style:{minWidth:200}},t[e].type?.name),s.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),s.createElement("td",null,t[e].required?"Yes":"No"),s.createElement("td",null,t[e].description))))))):null};function c(e){const t=(0,r.d)(e.componentName),{description:n,displayName:l,props:c}=t[0],d=`How to use the ${l} component`,p=`Full code for the ${l} component`;return s.createElement(s.Fragment,null,n,s.createElement("br",null),s.createElement("br",null),s.createElement(a.A,null,s.createElement(o.A,{value:"props",label:"Properties"},s.createElement(m,{props:c})),s.createElement(o.A,{value:"example",label:"Example"},e.example&&s.createElement(i.A,{title:d,className:"language-tsx test"},e.example)),s.createElement(o.A,{value:"code",label:"Source Code"},e.codeString&&s.createElement(i.A,{title:p,className:"language-tsx"},e.codeString)),s.createElement(o.A,{value:"accessibility",label:"Accessibility"},s.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,t,n)=>{n.d(t,{d:()=>i});var s=n(2736);const i=e=>(0,s.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},80752:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,exampleString:()=>p,frontMatter:()=>r,metadata:()=>m,toc:()=>d});var s=n(58168),i=(n(96540),n(15680));n(41873),n(54610);const a="import React, { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport { ButtonDecoratorType, VAIcon } from 'components'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { generateTestIDForInlineTextIconList } from 'utils/common'\nimport { useTheme } from 'utils/hooks'\n\nimport { READ } from '../constants/secureMessaging'\nimport Box from './Box'\nimport { InlineTextWithIcons } from './InlineTextWithIcons'\nimport LabelTag, { LabelTagTypeConstants } from './LabelTag'\nimport { InlineTextWithIconsProps, List, ListItemObj, ListProps } from './index'\n\n/**\n * Signifies each item in the list of items in {@link MessageListProps}\n */\nexport type MessageListItemObj = {\n  /** lines of text to display */\n  inlineTextWithIcons: Array<InlineTextWithIconsProps>\n  /** Tells if one is displaying sent folder messages list - needed for READ tag display conditional */\n  isSentFolder: boolean\n  /** Attribute for whether recipient has read user's sent message (Sent folder)\n   * OR whether user has read received message (Inbox || Folders other than 'Sent')\n   * Usage depends on which folder you're in */\n  readReceipt?: string\n} & Partial<ListItemObj>\n\n/**\n * Props for {@link MessageList}\n */\nexport type MessageListProps = {\n  /** list of items of which a button will be rendered per item */\n  items: Array<MessageListItemObj>\n} & Partial<ListProps>\n\n/**\n * Display a list of buttons with text and optional actions\n */\nconst MessageList: FC<MessageListProps> = ({ items, title, titleA11yLabel }) => {\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n  const listItemObjs: Array<ListItemObj> = items.map((item) => {\n    // Move all of the properties except text lines to the standard list item object\n    const { inlineTextWithIcons, testId, detoxTestID, ...listItemObj } = item\n    let testIdToUse = testId ? testId : generateTestIDForInlineTextIconList(inlineTextWithIcons, t)\n\n    // We want to display black 'Read' tag only for sent messages that have been seen by the recipients\n    const isSentReadTag = item.isSentFolder && item.readReceipt === READ\n    const sentReadTagA11y = isSentReadTag ? t('secureMessaging.folders.sent.read.a11y') : ''\n\n    const content = (\n      // Package individual textLineWithIcon components together into one message\n      <Box flex={1} flexDirection=\"row\" alignItems=\"center\">\n        <Box flex={1} flexDirection=\"column\" mb={7}>\n          {inlineTextWithIcons?.map((textObj: InlineTextWithIconsProps, index: number) => {\n            return <InlineTextWithIcons key={index} {...textObj} />\n          })}\n          {isSentReadTag && (\n            <Box mt={7}>\n              <LabelTag text={t('secureMessaging.folders.read.tag')} labelType={LabelTagTypeConstants.tagInactive} />\n            </Box>\n          )}\n        </Box>\n        <VAIcon\n          name=\"ChevronRight\"\n          width={theme.dimensions.chevronListItemWidth}\n          height={theme.dimensions.chevronListItemHeight}\n          fill={theme.colors.icon.chevronListItem}\n          testID=\"ChevronRight\"\n        />\n      </Box>\n    )\n\n    // Append accessibility label for Sent messages 'READ' tag\n    testIdToUse = `${testIdToUse} ${sentReadTagA11y}`.trim()\n    const detoxTestIDToUse = detoxTestID ? detoxTestID : testIdToUse\n\n    return {\n      ...listItemObj,\n      content,\n      testId: testIdToUse,\n      decorator: ButtonDecoratorType.None,\n      detoxTestID: detoxTestIDToUse,\n    }\n  })\n\n  return <List items={listItemObjs} title={title} titleA11yLabel={titleA11yLabel} />\n}\n\nexport default MessageList\n";var o=n(7644);const r={},l=void 0,m={unversionedId:"Flagship design library/Components/Layout and Organization/List/MessageList",id:"Flagship design library/Components/Layout and Organization/List/MessageList",title:"MessageList",description:"",source:"@site/docs/Flagship design library/Components/Layout and Organization/List/MessageList.mdx",sourceDirName:"Flagship design library/Components/Layout and Organization/List",slug:"/Flagship design library/Components/Layout and Organization/List/MessageList",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/MessageList",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"List header",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/ListHeader"},next:{title:"SelectionList",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/SelectionList"}},c={},d=[],p="<MessageList items={getMessagesListItems()} title={folderName} />",g={toc:d,exampleString:p},u="wrapper";function h(e){let{components:t,...n}=e;return(0,i.yg)(u,(0,s.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)(o.A,{componentName:"MessageList",example:p,codeString:a,mdxType:"ComponentTopInfo"}))}h.isMDXComponent=!0}}]);