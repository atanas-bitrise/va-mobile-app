"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1631],{7644:(e,n,t)=>{t.d(n,{A:()=>d});var i=t(96540),o=t(54610),a=t(3384),r=t(31347),c=t(28057),l=t(84476);const s=e=>{let{props:n}=e;return n?i.createElement(i.Fragment,null,l.Ay.isEmpty(n)?i.createElement("pre",{className:"preText"},"This component does not have props defined"):i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Name"),i.createElement("th",null,"Type"),i.createElement("th",null,"Default Value"),i.createElement("th",null,"Required"),i.createElement("th",null,"Description"))),i.createElement("tbody",null,Object.keys(n).map((e=>i.createElement("tr",{key:e},i.createElement("td",null,i.createElement("code",null,e)),i.createElement("td",{style:{minWidth:200}},n[e].type?.name),i.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),i.createElement("td",null,n[e].required?"Yes":"No"),i.createElement("td",null,n[e].description))))))):null};function d(e){const n=(0,c.d)(e.componentName),{description:t,displayName:l,props:d}=n[0],p=`How to use the ${l} component`,f=`Full code for the ${l} component`;return i.createElement(i.Fragment,null,t,i.createElement("br",null),i.createElement("br",null),i.createElement(a.A,null,i.createElement(r.A,{value:"props",label:"Properties"},i.createElement(s,{props:d})),i.createElement(r.A,{value:"example",label:"Example"},e.example&&i.createElement(o.A,{title:p,className:"language-tsx test"},e.example)),i.createElement(r.A,{value:"code",label:"Source Code"},e.codeString&&i.createElement(o.A,{title:f,className:"language-tsx"},e.codeString)),i.createElement(r.A,{value:"accessibility",label:"Accessibility"},i.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,n,t)=>{t.d(n,{d:()=>o});var i=t(2736);const o=e=>(0,i.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},66785:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,exampleString:()=>f,frontMatter:()=>c,metadata:()=>s,toc:()=>p});var i=t(58168),o=(t(96540),t(15680));t(41873),t(54610);const a="import React, { FC, useEffect, useState } from 'react'\nimport { Linking, View } from 'react-native'\nimport { NotificationBackgroundFetchResult, Notifications } from 'react-native-notifications'\nimport { useSelector } from 'react-redux'\n\nimport { usePersonalInformation } from 'api/personalInformation/getPersonalInformation'\nimport { Events } from 'constants/analytics'\nimport { RootState } from 'store'\nimport { AuthState } from 'store/slices'\nimport {\n  dispatchSetInitialUrl,\n  dispatchSetTappedForegroundNotification,\n  registerDevice,\n} from 'store/slices/notificationSlice'\nimport { logAnalyticsEvent } from 'utils/analytics'\nimport { useAppDispatch } from 'utils/hooks'\n\nconst foregroundNotifications: Array<string> = []\n\n/**\n * notification manager component to handle all push logic\n */\nconst NotificationManager: FC = ({ children }) => {\n  const { loggedIn } = useSelector<RootState, AuthState>((state) => state.auth)\n  const { data: personalInformation } = usePersonalInformation({ enabled: loggedIn })\n  const dispatch = useAppDispatch()\n  const [eventsRegistered, setEventsRegistered] = useState(false)\n  useEffect(() => {\n    const register = () => {\n      Notifications.events().registerRemoteNotificationsRegistered((event) => {\n        console.debug('Device Token Received', event.deviceToken)\n        dispatch(registerDevice(event.deviceToken, undefined, personalInformation?.id))\n      })\n      Notifications.events().registerRemoteNotificationsRegistrationFailed((event) => {\n        //TODO: Log this error in crashlytics?\n        console.error(event)\n        dispatch(registerDevice())\n      })\n      Notifications.registerRemoteNotifications()\n    }\n\n    if (loggedIn) {\n      register()\n    }\n  }, [dispatch, loggedIn, personalInformation?.id])\n\n  const registerNotificationEvents = () => {\n    // Register callbacks for notifications that happen when the app is in the foreground\n    Notifications.events().registerNotificationReceivedForeground((notification, completion) => {\n      console.debug('Notification Received - Foreground', notification)\n      foregroundNotifications.push(notification.identifier)\n      // Calling completion on iOS with `alert: true` will present the native iOS inApp notification.\n      completion({ alert: true, sound: true, badge: true })\n    })\n\n    // Register callback for opened notifications\n    Notifications.events().registerNotificationOpened((notification, completion) => {\n      /** this should be logged in firebase automatically. Anything here should be actions the app takes when it\n       * opens like deep linking, etc\n       */\n      logAnalyticsEvent(Events.vama_notification_click(notification.payload.url))\n      if (foregroundNotifications.includes(notification.identifier)) {\n        dispatch(dispatchSetTappedForegroundNotification())\n      }\n\n      // Open deep link from the notification when present. If the user is\n      // not logged in, store the link so it can be opened after authentication.\n      if (notification.payload.url) {\n        if (loggedIn) {\n          Linking.openURL(notification.payload.url)\n        } else {\n          dispatch(dispatchSetInitialUrl(notification.payload.url))\n        }\n      }\n      console.debug('Notification opened by device user', notification)\n      console.debug(`Notification opened with an action identifier: ${notification.identifier}`)\n      completion()\n    })\n\n    // Register callbacks for notifications that happen when the app is in the background\n    Notifications.events().registerNotificationReceivedBackground((notification, completion) => {\n      console.debug('Notification Received - Background', notification)\n      // Calling completion on iOS with `alert: true` will present the native iOS inApp notification.\n      completion(NotificationBackgroundFetchResult.NEW_DATA)\n    })\n\n    // Callback in case there is need to do something with initial notification before it goes to system tray\n    Notifications.getInitialNotification()\n      .then((notification) => {\n        logAnalyticsEvent(Events.vama_notification_click(notification?.payload.url))\n        console.debug('Initial notification was:', notification || 'N/A')\n\n        if (notification?.payload.url) {\n          dispatch(dispatchSetInitialUrl(notification.payload.url))\n        }\n      })\n      .catch((err) => console.error('getInitialNotification() failed', err))\n  }\n\n  if (!eventsRegistered) {\n    registerNotificationEvents()\n    setEventsRegistered(true)\n  }\n\n  const s = { flex: 1 }\n  return <View style={s}>{children}</View>\n}\n\nexport default NotificationManager\n";var r=t(7644);const c={},l=void 0,s={unversionedId:"Flagship design library/Components/Uncategorized/NotificationManager",id:"Flagship design library/Components/Uncategorized/NotificationManager",title:"NotificationManager",description:"",source:"@site/docs/Flagship design library/Components/Uncategorized/NotificationManager.mdx",sourceDirName:"Flagship design library/Components/Uncategorized",slug:"/Flagship design library/Components/Uncategorized/NotificationManager",permalink:"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/NotificationManager",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AppVersionAndBuild",permalink:"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/AppVersionAndBuild"},next:{title:"VAIcon",permalink:"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAIcon"}},d={},p=[],f='return (\n    <ActionSheetProvider>\n      <ThemeProvider theme={theme}>\n        <Provider store={store}>\n          <I18nextProvider i18n={i18n}>\n            <NavigationContainer ref={navigationRef} onReady={navOnReady} onStateChange={onNavStateChange}>\n              <NotificationManager>\n                <SafeAreaProvider>\n                  <StatusBar barStyle="light-content" backgroundColor={theme.colors.icon.active} />\n                  <AuthGuard />\n                </SafeAreaProvider>\n              </NotificationManager>\n            </NavigationContainer>\n          </I18nextProvider>\n        </Provider>\n      </ThemeProvider>\n    </ActionSheetProvider>\n  )',m={toc:p,exampleString:f},g="wrapper";function u(e){let{components:n,...t}=e;return(0,o.yg)(g,(0,i.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)(r.A,{componentName:"NotificationManager",example:f,codeString:a,mdxType:"ComponentTopInfo"}))}u.isMDXComponent=!0}}]);