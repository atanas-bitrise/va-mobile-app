"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5139],{72675:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=r(87462),n=(r(67294),r(3905));r(8209);const a={},o="Updating or Adding to an Existing Feature State",s={unversionedId:"Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature",id:"Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature",title:"Updating or Adding to an Existing Feature State",description:"Intro",source:"@site/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature.md",sourceDirName:"Engineering/FrontEnd/ReduxToolkit/Tutorials",slug:"/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add a New Feature State",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit"},next:{title:"Development Best Practices",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices"}},c={},l=[{value:"Intro",id:"intro",level:2},{value:"Adding a New State",id:"adding-a-new-state",level:2}],d={toc:l},p="wrapper";function m(t){let{components:e,...r}=t;return(0,n.kt)(p,(0,i.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"updating-or-adding-to-an-existing-feature-state"},"Updating or Adding to an Existing Feature State"),(0,n.kt)("h2",{id:"intro"},"Intro"),(0,n.kt)("p",null,"This tutorial will consists of adding state to an existing feature state. "),(0,n.kt)("h2",{id:"adding-a-new-state"},"Adding a New State"),(0,n.kt)("p",null,"Here we are going to add a new reducer to clear the data on logout to the existing militaryServiceSlice.ts."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Current Slice Code")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/src/store/slices/militaryServiceSlice.ts"',title:'"/src/store/slices/militaryServiceSlice.ts"'},"import { PayloadAction, createSlice } from '@reduxjs/toolkit'\n\nimport * as api from 'store/api'\nimport { AppThunk } from 'store'\nimport { ScreenIDTypes, ServiceData } from '../api'\nimport { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice'\nimport { getCommonErrorFromAPIError } from 'utils/errors'\nimport { getDateFromString } from 'utils/formattingUtils'\nimport { isErrorObject } from 'utils/common'\nimport { max } from 'underscore'\n\nexport type MilitaryServiceState = {\n  serviceHistory: api.ServiceHistoryData\n  loading: boolean\n  error?: Error\n  mostRecentBranch?: string\n  needsDataLoad: boolean\n  preloadComplete: boolean\n}\n\nexport const initialMilitaryServiceState: MilitaryServiceState = {\n  serviceHistory: [] as api.ServiceHistoryData,\n  loading: false,\n  needsDataLoad: true,\n  preloadComplete: false,\n}\n\n/**\n * Redux action to get service history for user\n */\nexport const getServiceHistory =\n  (screenID?: ScreenIDTypes): AppThunk =>\n  async (dispatch) => {\n    dispatch(dispatchClearErrors(screenID))\n    dispatch(dispatchSetTryAgainFunction(() => dispatch(getServiceHistory(screenID))))\n\n    try {\n      dispatch(dispatchStartGetHistory())\n      const mshData = await api.get<api.MilitaryServiceHistoryData>('/v0/military-service-history')\n\n      dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory }))\n    } catch (error) {\n      if (isErrorObject(error)) {\n        dispatch(dispatchFinishGetHistory({ error }))\n        dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID }))\n      }\n    }\n  }\n\n/**\n * Redux slice that will create the actions and reducers\n */\nconst militaryServiceSlice = createSlice({\n  name: 'militaryService',\n  initialState: initialMilitaryServiceState,\n  reducers: {\n    dispatchStartGetHistory: (state) => {\n      state.loading = true\n    },\n\n    dispatchFinishGetHistory: (state, action: PayloadAction<{ serviceHistory?: api.ServiceHistoryData; error?: Error }>) => {\n      const { serviceHistory, error } = action.payload\n      const history = serviceHistory || state.serviceHistory\n\n      const latestHistory = max(history, (historyItem) => {\n        return getDateFromString(historyItem.endDate)\n      }) as ServiceData\n\n      return {\n        ...state,\n        error,\n        mostRecentBranch: latestHistory?.branchOfService,\n        serviceHistory: history,\n        loading: false,\n        needsDataLoad: !!error,\n        preloadComplete: true,\n      }\n    },\n  },\n})\n\nexport const { dispatchFinishGetHistory, dispatchStartGetHistory } = militaryServiceSlice.actions\nexport default militaryServiceSlice.reducer\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Code after adding the logout reducer")),(0,n.kt)("p",null,"Here we added the ",(0,n.kt)("strong",{parentName:"p"},"dispatchMilitaryHistoryLogout")," reducer function which we will extract an action to be dispatch on the logout Redux thunk."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/src/store/slices/militaryServiceSlice.ts"',title:'"/src/store/slices/militaryServiceSlice.ts"'},"import { PayloadAction, createSlice } from '@reduxjs/toolkit'\n\nimport * as api from 'store/api'\nimport { AppThunk } from 'store'\nimport { ScreenIDTypes, ServiceData } from '../api'\nimport { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice'\nimport { getCommonErrorFromAPIError } from 'utils/errors'\nimport { getDateFromString } from 'utils/formattingUtils'\nimport { isErrorObject } from 'utils/common'\nimport { max } from 'underscore'\n\nexport type MilitaryServiceState = {\n  serviceHistory: api.ServiceHistoryData\n  loading: boolean\n  error?: Error\n  mostRecentBranch?: string\n  needsDataLoad: boolean\n  preloadComplete: boolean\n}\n\nexport const initialMilitaryServiceState: MilitaryServiceState = {\n  serviceHistory: [] as api.ServiceHistoryData,\n  loading: false,\n  needsDataLoad: true,\n  preloadComplete: false,\n}\n\n/**\n * Redux action to get service history for user\n */\nexport const getServiceHistory =\n  (screenID?: ScreenIDTypes): AppThunk =>\n  async (dispatch) => {\n    dispatch(dispatchClearErrors(screenID))\n    dispatch(dispatchSetTryAgainFunction(() => dispatch(getServiceHistory(screenID))))\n\n    try {\n      dispatch(dispatchStartGetHistory())\n      const mshData = await api.get<api.MilitaryServiceHistoryData>('/v0/military-service-history')\n\n      dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory }))\n    } catch (error) {\n      if (isErrorObject(error)) {\n        dispatch(dispatchFinishGetHistory({ error }))\n        dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID }))\n      }\n    }\n  }\n\n/**\n * Redux slice that will create the actions and reducers\n */\nconst militaryServiceSlice = createSlice({\n  name: 'militaryService',\n  initialState: initialMilitaryServiceState,\n  reducers: {\n    dispatchStartGetHistory: (state) => {\n      state.loading = true\n    },\n\n    dispatchFinishGetHistory: (state, action: PayloadAction<{ serviceHistory?: api.ServiceHistoryData; error?: Error }>) => {\n      const { serviceHistory, error } = action.payload\n      const history = serviceHistory || state.serviceHistory\n\n      const latestHistory = max(history, (historyItem) => {\n        return getDateFromString(historyItem.endDate)\n      }) as ServiceData\n\n      return {\n        ...state,\n        error,\n        mostRecentBranch: latestHistory?.branchOfService,\n        serviceHistory: history,\n        loading: false,\n        needsDataLoad: !!error,\n        preloadComplete: true,\n      }\n    },\n\n     dispatchMilitaryHistoryLogout: () => {\n      return {\n        ...initialMilitaryServiceState,\n      }\n    },\n\n  },\n})\n\nexport const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions\nexport default militaryServiceSlice.reducer\n")),(0,n.kt)("p",null,"That is all it takes to add a new state to an existing slice file. Now the ",(0,n.kt)("strong",{parentName:"p"},"dispatchMilitaryHistoryLogout")," could be imported to any file and be dispatched."))}m.isMDXComponent=!0}}]);