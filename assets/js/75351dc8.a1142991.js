"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1389],{7644:(e,t,n)=>{n.d(t,{A:()=>c});var i=n(96540),o=n(54610),a=n(3384),r=n(31347),s=n(28057),l=n(84476);const m=e=>{let{props:t}=e;return t?i.createElement(i.Fragment,null,l.Ay.isEmpty(t)?i.createElement("pre",{className:"preText"},"This component does not have props defined"):i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Name"),i.createElement("th",null,"Type"),i.createElement("th",null,"Default Value"),i.createElement("th",null,"Required"),i.createElement("th",null,"Description"))),i.createElement("tbody",null,Object.keys(t).map((e=>i.createElement("tr",{key:e},i.createElement("td",null,i.createElement("code",null,e)),i.createElement("td",{style:{minWidth:200}},t[e].type?.name),i.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),i.createElement("td",null,t[e].required?"Yes":"No"),i.createElement("td",null,t[e].description))))))):null};function c(e){const t=(0,s.d)(e.componentName),{description:n,displayName:l,props:c}=t[0],p=`How to use the ${l} component`,d=`Full code for the ${l} component`;return i.createElement(i.Fragment,null,n,i.createElement("br",null),i.createElement("br",null),i.createElement(a.A,null,i.createElement(r.A,{value:"props",label:"Properties"},i.createElement(m,{props:c})),i.createElement(r.A,{value:"example",label:"Example"},e.example&&i.createElement(o.A,{title:p,className:"language-tsx test"},e.example)),i.createElement(r.A,{value:"code",label:"Source Code"},e.codeString&&i.createElement(o.A,{title:d,className:"language-tsx"},e.codeString)),i.createElement(r.A,{value:"accessibility",label:"Accessibility"},i.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,t,n)=>{n.d(t,{d:()=>o});var i=n(2736);const o=e=>(0,i.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},75532:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>b,exampleString:()=>d,frontMatter:()=>s,metadata:()=>m,toc:()=>p});var i=n(58168),o=(n(96540),n(15680));n(41873),n(54610);const a="import React, { FC } from 'react'\n\nimport { useTheme } from 'utils/hooks'\n\nimport BaseListItem, { BaseListItemProps } from './BaseListItem'\nimport Box from './Box'\nimport { SwitchProps } from './Switch'\nimport { TextViewProps } from './TextView'\nimport { TextView } from './index'\n\n/**\n * Signifies each item in the list of items in {@link ListProps}\n */\nexport type ListItemObj = {\n  /** optional text to use as the button's accessibility hint */\n  a11yHintText?: string\n\n  /** display content for the item */\n  content?: React.ReactNode\n\n  /** on press event */\n  onPress?: () => void\n\n  /** request file number for file indicator */\n  requestNumber?: number\n\n  /** request file if file was loaded */\n  fileUploaded?: boolean\n} & Partial<BaseListItemProps>\n\n/**\n * Props for {@link List}\n */\nexport type ListProps = {\n  /** list of items of which a button will be rendered per item */\n  items: Array<ListItemObj>\n\n  /** optional title to use for the list */\n  title?: string\n\n  /**optional a11y hint for the title */\n  titleA11yLabel?: string\n}\n\n/**\n * A common component for showing a list of <ListItem>.\n */\nconst List: FC<ListProps> = ({ items, title, titleA11yLabel }) => {\n  const theme = useTheme()\n  const { gutter, condensedMarginBetween, standardMarginBetween } = theme.dimensions\n\n  const titleProps: TextViewProps = {\n    variant: 'TableHeaderBold',\n    mx: gutter,\n    mb: condensedMarginBetween,\n    mt: standardMarginBetween,\n    accessibilityRole: 'header',\n  }\n\n  const buttons = items.map((item, index) => {\n    const { content, a11yHintText, decoratorProps } = item\n    const dProps = decoratorProps as Partial<SwitchProps>\n\n    return (\n      <BaseListItem key={index} a11yHint={a11yHintText || dProps?.a11yHint || ''} {...item}>\n        {content}\n      </BaseListItem>\n    )\n  })\n\n  return (\n    <Box>\n      {title && (\n        <TextView\n          {...titleProps}\n          accessibilityLabel={titleA11yLabel}\n          testID={titleA11yLabel || title}\n          accessible={true}>\n          {title}\n        </TextView>\n      )}\n      <Box borderTopWidth={theme.dimensions.borderWidth} borderStyle=\"solid\" borderColor=\"primary\">\n        <Box backgroundColor={'list'}>{buttons}</Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default List\n";var r=n(7644);const s={},l=void 0,m={unversionedId:"Flagship design library/Components/Layout and Organization/List/List",id:"Flagship design library/Components/Layout and Organization/List/List",title:"List",description:"",source:"@site/docs/Flagship design library/Components/Layout and Organization/List/List.mdx",sourceDirName:"Flagship design library/Components/Layout and Organization/List",slug:"/Flagship design library/Components/Layout and Organization/List/",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LargeNavButton",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/LargeNavButton"},next:{title:"BaseListItem",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/BaseListItem"}},c={},p=[],d="import { List, ListItemObj } from 'components'\n    const listExample: Array<ListItemObj> = [\n        { content: <TextView>'My Title 1'</TextView>, a11yHintText: 'Hint 1', onPress: () => { console.log('button 1 pressed') } },\n        { content: <TextView>'My Title 2'</TextView>, a11yHintText: 'Hint 2', onPress: () => { console.log('button 2 pressed') } },\n    ]\n\n<List items={listExample} />",u={toc:p,exampleString:d},y="wrapper";function b(e){let{components:t,...n}=e;return(0,o.yg)(y,(0,i.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)(r.A,{componentName:"List",example:d,codeString:a,mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);