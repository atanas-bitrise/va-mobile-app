"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5800],{7644:(e,t,n)=>{n.d(t,{A:()=>m});var r=n(96540),o=n(54610),a=n(3384),l=n(31347),s=n(28057),i=n(84476);const c=e=>{let{props:t}=e;return t?r.createElement(r.Fragment,null,i.Ay.isEmpty(t)?r.createElement("pre",{className:"preText"},"This component does not have props defined"):r.createElement("table",null,r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Name"),r.createElement("th",null,"Type"),r.createElement("th",null,"Default Value"),r.createElement("th",null,"Required"),r.createElement("th",null,"Description"))),r.createElement("tbody",null,Object.keys(t).map((e=>r.createElement("tr",{key:e},r.createElement("td",null,r.createElement("code",null,e)),r.createElement("td",{style:{minWidth:200}},t[e].type?.name),r.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),r.createElement("td",null,t[e].required?"Yes":"No"),r.createElement("td",null,t[e].description))))))):null};function m(e){const t=(0,s.d)(e.componentName),{description:n,displayName:i,props:m}=t[0],p=`How to use the ${i} component`,d=`Full code for the ${i} component`;return r.createElement(r.Fragment,null,n,r.createElement("br",null),r.createElement("br",null),r.createElement(a.A,null,r.createElement(l.A,{value:"props",label:"Properties"},r.createElement(c,{props:m})),r.createElement(l.A,{value:"example",label:"Example"},e.example&&r.createElement(o.A,{title:p,className:"language-tsx test"},e.example)),r.createElement(l.A,{value:"code",label:"Source Code"},e.codeString&&r.createElement(o.A,{title:d,className:"language-tsx"},e.codeString)),r.createElement(l.A,{value:"accessibility",label:"Accessibility"},r.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,t,n)=>{n.d(t,{d:()=>o});var r=n(2736);const o=e=>(0,r.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},78375:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>g,exampleString:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var r=n(58168),o=(n(96540),n(15680));n(41873),n(54610);const a="import React, { FC } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { ViewStyle } from 'react-native'\n\nimport { Button } from '@department-of-veterans-affairs/mobile-component-library'\n\nimport { Box, TextView, VAScrollView } from 'components'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { testIdProps } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\n\nexport type BasicErrorProps = {\n  /** function called when the Try again button is pressed */\n  onTryAgain: () => void\n  /** message to display */\n  messageText: string\n  /** text to appear in bold  */\n  headerText?: string\n  /** accessibility hint for the header */\n  headerA11yLabel?: string\n  /** hint for the try again button */\n  buttonA11yHint?: string\n  /** label for button and accessibility title */\n  label?: string\n}\n\n/**A common component to show an error*/\nconst BasicError: FC<BasicErrorProps> = ({\n  onTryAgain,\n  messageText,\n  buttonA11yHint,\n  headerText,\n  headerA11yLabel,\n  label,\n}) => {\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n  const buttonText: string = label || t('tryAgain')\n\n  const scrollStyles: ViewStyle = {\n    flexGrow: 1,\n    justifyContent: 'center',\n  }\n\n  const containerStyles = {\n    flex: 1,\n    mx: theme.dimensions.gutter,\n    mt: theme.dimensions.contentMarginTop,\n    mb: theme.dimensions.contentMarginBottom,\n  }\n\n  return (\n    <VAScrollView contentContainerStyle={scrollStyles}>\n      <Box justifyContent=\"center\" {...containerStyles}>\n        {headerText && (\n          <TextView\n            {...testIdProps(headerA11yLabel ? headerA11yLabel : headerText)}\n            variant=\"MobileBodyBold\"\n            accessibilityRole=\"header\"\n            textAlign=\"center\">\n            {headerText}\n          </TextView>\n        )}\n        <TextView paragraphSpacing={true} textAlign=\"center\">\n          {messageText}\n        </TextView>\n        <Box accessibilityRole=\"button\">\n          <Button onPress={onTryAgain} label={buttonText} a11yHint={buttonA11yHint} testID={buttonText} />\n        </Box>\n      </Box>\n    </VAScrollView>\n  )\n}\n\nexport default BasicError\n";var l=n(7644);const s={},i=void 0,c={unversionedId:"Flagship design library/Components/Errors/BasicError",id:"Flagship design library/Components/Errors/BasicError",title:"BasicError",description:"",source:"@site/docs/Flagship design library/Components/Errors/BasicError.mdx",sourceDirName:"Flagship design library/Components/Errors",slug:"/Flagship design library/Components/Errors/BasicError",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/BasicError",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Errors",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/"},next:{title:"CallHelpCenter",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/CallHelpCenter"}},m={},p=[],d="if (letterDownloadError) {\nreturn <BasicError \n        onTryAgain={onViewLetter} \n        messageText={'letters.download.error'} \n        buttonA11yHint={'Try again to download your letter'} />\n}",u={toc:p,exampleString:d},y="wrapper";function g(e){let{components:t,...n}=e;return(0,o.yg)(y,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)(l.A,{componentName:"BasicError",example:d,codeString:a,mdxType:"ComponentTopInfo"}))}g.isMDXComponent=!0}}]);