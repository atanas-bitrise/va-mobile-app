"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6453],{7644:(e,n,t)=>{t.d(n,{A:()=>p});var o=t(96540),a=t(54610),l=t(3384),r=t(31347),i=t(28057),s=t(84476);const c=e=>{let{props:n}=e;return n?o.createElement(o.Fragment,null,s.Ay.isEmpty(n)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(n).map((e=>o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},n[e].type?.name),o.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),o.createElement("td",null,n[e].required?"Yes":"No"),o.createElement("td",null,n[e].description))))))):null};function p(e){const n=(0,i.d)(e.componentName),{description:t,displayName:s,props:p}=n[0],d=`How to use the ${s} component`,m=`Full code for the ${s} component`;return o.createElement(o.Fragment,null,t,o.createElement("br",null),o.createElement("br",null),o.createElement(l.A,null,o.createElement(r.A,{value:"props",label:"Properties"},o.createElement(c,{props:p})),o.createElement(r.A,{value:"example",label:"Example"},e.example&&o.createElement(a.A,{title:d,className:"language-tsx test"},e.example)),o.createElement(r.A,{value:"code",label:"Source Code"},e.codeString&&o.createElement(a.A,{title:m,className:"language-tsx"},e.codeString)),o.createElement(r.A,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,n,t)=>{t.d(n,{d:()=>a});var o=t(2736);const a=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},64716:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>b,exampleString:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var o=t(58168),a=(t(96540),t(15680));t(41873),t(54610);const l="import React, { FC, useState } from 'react'\nimport { Pressable, PressableProps, ViewStyle } from 'react-native'\n\nimport { a11yHintProp } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\n\nimport Box, { BoxProps } from './Box'\nimport TextView from './TextView'\nimport VAIcon, { VAIconProps } from './VAIcon'\nimport { ColorVariant, TextArea } from './index'\n\n/**\n * Signifies props passed into {@link CollapsibleView}\n */\nexport type CollapsibleViewProps = {\n  /** text displayed on the touchable */\n  text: string\n  /** optional color for the touchable text */\n  textColor?: ColorVariant\n  /** optional param that renders the child content outside text area when set to false (defaults to true) */\n  contentInTextArea?: boolean\n  /** optional a11y hint */\n  a11yHint?: string\n  /** Whether to display any of the collapsible view in a text area. If false, contentInTextArea will have no effect. **/\n  showInTextArea?: boolean\n  /** Option Test ID */\n  testID?: string\n}\n\n/**\n * CollapsibleView that on click reveals content, which is hidden again on another click\n *\n * @returns CollapsibleView component\n */\nconst CollapsibleView: FC<CollapsibleViewProps> = ({\n  text,\n  contentInTextArea = true,\n  showInTextArea = true,\n  a11yHint,\n  textColor,\n  children,\n  testID,\n}) => {\n  const theme = useTheme()\n  const [expanded, setExpanded] = useState(false)\n\n  const onPress = (): void => {\n    setExpanded(!expanded)\n  }\n\n  const boxStyles: BoxProps = {\n    // flexShrink is necessary to keep textView from expanding too far and causing a gap between text contents and arrow icon\n    // also keeps textView from pushing arrow beyond right margin when large text is enabled\n    flexShrink: 1,\n    mr: 7,\n    borderBottomWidth: 2,\n    borderBottomColor: 'photoAdd', // todo rename photoAdd border color to be more abstract (talk to design)\n  }\n\n  const getChevronIcon = (): React.ReactNode => {\n    const iconProps: VAIconProps = {\n      fill: theme.colors.icon.chevronCollapsible,\n      name: expanded ? 'ChevronUp' : 'ChevronDown',\n      width: 9,\n      height: 7,\n    }\n    return <VAIcon {...iconProps} />\n  }\n\n  const pressableProps: PressableProps = {\n    onPress,\n    accessibilityState: { expanded },\n    accessibilityRole: 'tab',\n  }\n\n  const pressableStyles: ViewStyle = {\n    flexDirection: 'row',\n    alignItems: 'center',\n    minHeight: theme.dimensions.touchableMinHeight,\n  }\n\n  const childrenDisplayed = expanded && <Box>{children}</Box>\n\n  const touchableRow = (\n    <Box minHeight={theme.dimensions.touchableMinHeight}>\n      <Pressable\n        accessibilityLabel={text}\n        {...a11yHintProp(a11yHint || '')}\n        style={pressableStyles}\n        {...pressableProps}\n        testID={testID}>\n        <Box {...boxStyles}>\n          <TextView color={textColor} variant={'MobileBody'}>\n            {text}\n          </TextView>\n        </Box>\n        {getChevronIcon()}\n      </Pressable>\n    </Box>\n  )\n\n  const a11yProps: BoxProps = {\n    accessibilityRole: 'tablist',\n  }\n\n  // If none of the content is shown in a text area\n  if (!showInTextArea) {\n    return (\n      <Box {...a11yProps}>\n        {touchableRow}\n        {childrenDisplayed}\n      </Box>\n    )\n  }\n\n  // If the pressable row and/or content is in a text area\n  return (\n    <Box {...a11yProps}>\n      <TextArea>\n        {touchableRow}\n        {contentInTextArea && childrenDisplayed}\n      </TextArea>\n      {!contentInTextArea && childrenDisplayed}\n    </Box>\n  )\n}\n\nexport default CollapsibleView\n";var r=t(7644);const i={},s=void 0,c={unversionedId:"Flagship design library/Components/Layout and Organization/CollapsibleView",id:"Flagship design library/Components/Layout and Organization/CollapsibleView",title:"CollapsibleView",description:"",source:"@site/docs/Flagship design library/Components/Layout and Organization/CollapsibleView.mdx",sourceDirName:"Flagship design library/Components/Layout and Organization",slug:"/Flagship design library/Components/Layout and Organization/CollapsibleView",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/CollapsibleView",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Layout and organization",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/"},next:{title:"LargeNavButton",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/LargeNavButton"}},p={},d=[],m="<CollapsibleView text={'title of dropdown'}> \n    <TextView>expanded content revealed on click</TextView> \n</CollapsibleView>",u={toc:d,exampleString:m},h="wrapper";function b(e){let{components:n,...t}=e;return(0,a.yg)(h,(0,o.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)(r.A,{componentName:"CollapsibleView",example:m,codeString:l,mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);