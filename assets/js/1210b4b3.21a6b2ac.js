"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5142],{16360:(e,n,t)=>{t.d(n,{A:()=>u});var a=t(96540),r=t(54610),l=t(3384),s=t(31347),o=t(28057),c=t(84476);const m=e=>{let{props:n}=e;return n?a.createElement(a.Fragment,null,c.Ay.isEmpty(n)?a.createElement("pre",{className:"preText"},"This component does not have param defined"):a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Param / Return"),a.createElement("th",null,"Description"))),a.createElement("tbody",null,Object.keys(n).map((e=>a.createElement("tr",{key:e},a.createElement("td",null,a.createElement("code",null,e)),a.createElement("td",null,"param"===e?n[e].split("\n").map(((e,n)=>{let t=e.split("-");return a.createElement("div",{key:n},a.createElement("code",null,t[0].trim()+":"),"\ufeff"+t[1])})):n[e]))))))):null};function u(e){const n=(0,o.d)(e.componentName),{description:t,displayName:c,tags:u}=n[0],d=`How to use the ${c} component`;return a.createElement(a.Fragment,null,a.createElement(l.A,null,a.createElement(s.A,{value:"description",label:"Description"},a.createElement("pre",{className:"preText"},t)),a.createElement(s.A,{value:"params",label:"Params and Return"},a.createElement(m,{props:u})),a.createElement(s.A,{value:"example",label:"Example"},e.example&&a.createElement(r.A,{title:d,className:"language-tsx test"},e.example))))}},28057:(e,n,t)=>{t.d(n,{d:()=>r});var a=t(2736);const r=e=>(0,a.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},21584:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>E,exampleString:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var a=t(58168),r=(t(96540),t(15680)),l=(t(41873),t(16360));const s={},o=void 0,c={unversionedId:"Engineering/FrontEnd/CustomHooks/useIsScreenReaderEnabled",id:"Engineering/FrontEnd/CustomHooks/useIsScreenReaderEnabled",title:"useIsScreenReaderEnabled",description:"",source:"@site/docs/Engineering/FrontEnd/CustomHooks/useIsScreenReaderEnabled.mdx",sourceDirName:"Engineering/FrontEnd/CustomHooks",slug:"/Engineering/FrontEnd/CustomHooks/useIsScreenReaderEnabled",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useIsScreenReaderEnabled",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useHeaderStyles",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useHeaderStyles"},next:{title:"useMessageWithSignature",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useMessageWithSignature"}},m={},u=[],d="const screenReaderEnabled = useIsScreenReaderEnabled()\n\nconst setFocus = useCallback(() => {\n    if (ref.current && screenReaderEnabled) {}\n}",i={toc:u,exampleString:d},p="wrapper";function E(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,a.A)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)(l.A,{componentName:"useIsScreenReaderEnabled",example:d,mdxType:"HooksInfo"}))}E.isMDXComponent=!0}}]);