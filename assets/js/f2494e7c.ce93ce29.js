"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4941],{7644:(e,n,t)=>{t.d(n,{A:()=>c});var a=t(96540),i=t(54610),o=t(3384),s=t(31347),l=t(28057),r=t(84476);const p=e=>{let{props:n}=e;return n?a.createElement(a.Fragment,null,r.Ay.isEmpty(n)?a.createElement("pre",{className:"preText"},"This component does not have props defined"):a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Name"),a.createElement("th",null,"Type"),a.createElement("th",null,"Default Value"),a.createElement("th",null,"Required"),a.createElement("th",null,"Description"))),a.createElement("tbody",null,Object.keys(n).map((e=>a.createElement("tr",{key:e},a.createElement("td",null,a.createElement("code",null,e)),a.createElement("td",{style:{minWidth:200}},n[e].type?.name),a.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),a.createElement("td",null,n[e].required?"Yes":"No"),a.createElement("td",null,n[e].description))))))):null};function c(e){const n=(0,l.d)(e.componentName),{description:t,displayName:r,props:c}=n[0],g=`How to use the ${r} component`,d=`Full code for the ${r} component`;return a.createElement(a.Fragment,null,t,a.createElement("br",null),a.createElement("br",null),a.createElement(o.A,null,a.createElement(s.A,{value:"props",label:"Properties"},a.createElement(p,{props:c})),a.createElement(s.A,{value:"example",label:"Example"},e.example&&a.createElement(i.A,{title:g,className:"language-tsx test"},e.example)),a.createElement(s.A,{value:"code",label:"Source Code"},e.codeString&&a.createElement(i.A,{title:d,className:"language-tsx"},e.codeString)),a.createElement(s.A,{value:"accessibility",label:"Accessibility"},a.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,n,t)=>{t.d(n,{d:()=>i});var a=t(2736);const i=e=>(0,a.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},96012:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,exampleString:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>g});var a=t(58168),i=(t(96540),t(15680)),o=(t(41873),t(54610),t(7644));const s="import React, { FC } from 'react'\nimport { Pressable, PressableProps, useWindowDimensions } from 'react-native'\n\nimport { useTheme } from 'utils/hooks'\n\nimport Box, { BoxProps } from './Box'\nimport TextView from './TextView'\nimport VAIcon, { VAIconProps } from './VAIcon'\n\nexport const LabelTagTypeConstants: {\n  tagBlue: LabelTagTypes\n  tagInactive: LabelTagTypes\n  tagYellow: LabelTagTypes\n  tagGreen: LabelTagTypes\n} = {\n  tagBlue: 'tagBlue',\n  tagInactive: 'tagInactive',\n  tagYellow: 'tagYellow',\n  tagGreen: 'tagGreen',\n}\n\nexport type LabelTagTypes = 'tagBlue' | 'tagInactive' | 'tagYellow' | 'tagGreen'\n\nexport type LabelTagProps = {\n  /** Message to be shown on the tag*/\n  text: string\n\n  /** Defines the color and look of the tag */\n  labelType: LabelTagTypes\n\n  /** Optional accessibility label */\n  a11yLabel?: string\n\n  /** Optional method called when tag is pressed */\n  onPress?: () => void\n\n  /** Optional accessibility hint if there is an on press */\n  a11yHint?: string\n}\n\n/**Common component to show a text inside a tag*/\nconst LabelTag: FC<LabelTagProps> = ({ text, labelType, onPress, a11yHint, a11yLabel }) => {\n  const theme = useTheme()\n  const fontScale = useWindowDimensions().fontScale\n  const adjustSize = fontScale >= 2\n  const textView = (\n    <TextView\n      flexWrap={'wrap'}\n      color={'labelTag'}\n      variant={'LabelTag'}\n      pl={adjustSize ? 30 : 12}\n      pr={adjustSize ? 8 : 12}\n      pt={adjustSize ? 8 : 4}\n      pb={adjustSize ? 12 : 4}>\n      {text}\n    </TextView>\n  )\n\n  let wrapperProps: BoxProps = {\n    minWidth: theme.dimensions.tagMinWidth,\n    minHeight: theme.dimensions.touchableMinHeight,\n    justifyContent: 'center',\n    alignSelf: 'flex-start',\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: labelType,\n    borderColor: labelType,\n    borderWidth: 1,\n    borderRadius: 100,\n  }\n\n  const getContent = () => {\n    if (!onPress) {\n      if (a11yLabel) {\n        wrapperProps = {\n          ...wrapperProps,\n          accessibilityLabel: a11yLabel,\n        }\n      }\n\n      return <Box {...wrapperProps}>{textView}</Box>\n    }\n\n    let pressableProps: PressableProps = {\n      onPress: onPress,\n      accessible: true,\n      accessibilityRole: 'button',\n    }\n\n    if (a11yHint) {\n      pressableProps = {\n        ...pressableProps,\n        accessibilityHint: a11yHint,\n      }\n    }\n\n    if (a11yLabel) {\n      pressableProps = {\n        ...pressableProps,\n        accessibilityLabel: a11yLabel,\n      }\n    }\n\n    const infoIconProps: VAIconProps = {\n      name: 'Info',\n      fill: 'tagInfoIcon',\n      fill2: 'transparent',\n      height: adjustSize ? 10 : 16,\n      width: adjustSize ? 10 : 16,\n      mr: adjustSize ? 5 : 10,\n    }\n\n    return (\n      <Pressable {...pressableProps}>\n        <Box {...wrapperProps}>\n          {textView}\n          <VAIcon {...infoIconProps} />\n        </Box>\n      </Pressable>\n    )\n  }\n\n  return getContent()\n}\n\nexport default LabelTag\n",l={title:"Tag"},r=void 0,p={unversionedId:"Flagship design library/Components/Tags/Tag",id:"Flagship design library/Components/Tags/Tag",title:"Tag",description:"Tags provide quick contextual keywords to inform status of a row or item.",source:"@site/docs/Flagship design library/Components/Tags/Tag.mdx",sourceDirName:"Flagship design library/Components/Tags",slug:"/Flagship design library/Components/Tags/Tag",permalink:"/va-mobile-app/docs/Flagship design library/Components/Tags/Tag",draft:!1,tags:[],version:"current",frontMatter:{title:"Tag"},sidebar:"tutorialSidebar",previous:{title:"Tags",permalink:"/va-mobile-app/docs/Flagship design library/Components/Tags/"},next:{title:"Text views",permalink:"/va-mobile-app/docs/Flagship design library/Components/TextViews/"}},c={},g=[{value:"Examples",id:"examples",level:2},{value:"Default",id:"default",level:3},{value:"Variations",id:"variations",level:3},{value:"Usage",id:"usage",level:2},{value:"When to use Tags",id:"when-to-use-tags",level:3},{value:"How this component works",id:"how-this-component-works",level:3},{value:"Choosing between variations",id:"choosing-between-variations",level:3},{value:"Instances of this component in production",id:"instances-of-this-component-in-production",level:3},{value:"Content considerations",id:"content-considerations",level:2},{value:"Accessibility considerations",id:"accessibility-considerations",level:2},{value:"Related",id:"related",level:2},{value:"Code usage",id:"code-usage",level:2}],d="<LabelTag text={'value'} />",m={toc:g,exampleString:d},u="wrapper";function h(e){let{components:n,...t}=e;return(0,i.yg)(u,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Tags provide quick contextual keywords to inform status of a row or item. "),(0,i.yg)("h2",{id:"examples"},"Examples"),(0,i.yg)("h3",{id:"default"},"Default"),(0,i.yg)("iframe",{width:"800",height:"450",title:"Image of master component in Figma showing light and dark mode",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/file/QVLPB3eOunmKrgQOuOt0SU/%F0%9F%93%90-DesignLibrary2.0---VAMobile?type=design&node-id=8429-12889&mode=design&t=KnuQLCCqRJnHgKVJ-4",title:"Image of master component in Figma showing light and dark mode",allowfullscreen:!0}),(0,i.yg)("h3",{id:"variations"},"Variations"),(0,i.yg)("iframe",{width:"800",height:"450",title:"Image of component examples in Figma",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/file/QVLPB3eOunmKrgQOuOt0SU/%F0%9F%93%90-DesignLibrary2.0---VAMobile?type=design&node-id=8429-12895&mode=design&t=KnuQLCCqRJnHgKVJ-4",allowfullscreen:!0}),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("h3",{id:"when-to-use-tags"},"When to use Tags"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"When there is a list of information with different statuses for different items")),(0,i.yg)("h3",{id:"how-this-component-works"},"How this component works"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Only one tag should be used per instance. "),(0,i.yg)("li",{parentName:"ul"},"The trailing icon is optional, as the status definition will not apply in all use cases. When the icon is used, the tag becomes a tappable button and opens a full panel.")),(0,i.yg)("h3",{id:"choosing-between-variations"},"Choosing between variations"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Static vs Interactive",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Static"),": To indicate a status that does not need further explanation or definition"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Interactive"),": When you need to provide additional context for a status, use the interactive version with the icon."))),(0,i.yg)("li",{parentName:"ul"},"Status",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Informative (blue)"),": To indicate neutral, default content. Consider the Informative status for new content with expected changes in status and trailing actions to take, like an Active prescription."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Success (green)"),": To indicate completed, finalized content. Consider the Success status for content with no further outstanding tasks, like a Confirmed appointment, or an In-Progress prescription refill."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Indeterminate/Unresolved (yellow)"),": To indicate pending actions or content that is still in-progress. Consider the Indeterminate status for content either the system or user can resolve, like a Pending appointment, or an On-Hold prescription refill."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Inactive (gray)"),': To indicate content that has no further actions. Consider the Inactive status for "dead ends", such as a Read message, a Canceled appointment, or an Expired prescription.')))),(0,i.yg)("h3",{id:"instances-of-this-component-in-production"},"Instances of this component in production"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"In Prescription cards"),(0,i.yg)("li",{parentName:"ul"},"In Appointment cards")),(0,i.yg)("h2",{id:"content-considerations"},"Content considerations"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Use common VA language, words, or terms for copy."),(0,i.yg)("li",{parentName:"ul"},"Keep copy to as few words as possible (1-2 words). There are exceptions where 3 or 4 words must be used in cases of VA-specific phrases or words."),(0,i.yg)("li",{parentName:"ul"},"The trailing info icon is optional. Not all tags will need one for further definition of the copy."),(0,i.yg)("li",{parentName:"ul"},"Use sentence case (i.e., Sentence case, not Title Case). Exceptions include words/phrases that use Title Case in other VA tools/sites."),(0,i.yg)("li",{parentName:"ul"},"The trailing icon should clearly describe the type of content that it will display. For example, use the info icon when additional information will display on tap.")),(0,i.yg)("h2",{id:"accessibility-considerations"},"Accessibility considerations"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"If user has magnification settings, the trailing info-icon should scale along with the font."),(0,i.yg)("li",{parentName:"ul"},"The icon is decorative, so it does not need to be read by a screen reader. If the icon is included, the tag should be read as a button.")),(0,i.yg)("h2",{id:"related"},"Related"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://design.va.gov/components/tag"},"Tag - VA Design System")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://designsystem.digital.gov/components/tag/"},"Tag - USWDS")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://m3.material.io/components/chips/overview"},"Chips - Material Design"))),(0,i.yg)("h2",{id:"code-usage"},"Code usage"),(0,i.yg)(o.A,{componentName:"LabelTag",example:d,codeString:s,mdxType:"ComponentTopInfo"}))}h.isMDXComponent=!0}}]);