"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1721],{32666:(e,n,t)=>{t.d(n,{Z:()=>p});var i=t(67294),a=t(97405),o=t(22808),l=t(30433),r=t(41284),s=t(36005);const c=e=>{let{props:n}=e;return n?i.createElement(i.Fragment,null,s.ZP.isEmpty(n)?i.createElement("pre",{className:"preText"},"This component does not have props defined"):i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Name"),i.createElement("th",null,"Type"),i.createElement("th",null,"Default Value"),i.createElement("th",null,"Required"),i.createElement("th",null,"Description"))),i.createElement("tbody",null,Object.keys(n).map((e=>i.createElement("tr",{key:e},i.createElement("td",null,i.createElement("code",null,e)),i.createElement("td",{style:{minWidth:200}},n[e].type?.name),i.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),i.createElement("td",null,n[e].required?"Yes":"No"),i.createElement("td",null,n[e].description))))))):null};function p(e){const n=(0,r.N)(e.componentName),{description:t,displayName:s,props:p}=n[0],m=`How to use the ${s} component`,d=`Full code for the ${s} component`;return i.createElement(i.Fragment,null,t,i.createElement("br",null),i.createElement("br",null),i.createElement(o.Z,null,i.createElement(l.Z,{value:"props",label:"Properties"},i.createElement(c,{props:p})),i.createElement(l.Z,{value:"example",label:"Example"},e.example&&i.createElement(a.Z,{title:m,className:"language-tsx test"},e.example)),i.createElement(l.Z,{value:"code",label:"Source Code"},e.codeString&&i.createElement(a.Z,{title:d,className:"language-tsx"},e.codeString)),i.createElement(l.Z,{value:"accessibility",label:"Accessibility"},i.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,n,t)=>{t.d(n,{N:()=>a});var i=t(52426);const a=e=>(0,i.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},27877:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>h,exampleString:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>m});var i=t(87462),a=(t(67294),t(3905));t(8209),t(97405);const o="import React, { FC } from 'react'\nimport { AccessibilityProps, TouchableWithoutFeedback, TouchableWithoutFeedbackProps } from 'react-native'\n\nimport { useExternalLink, useTheme } from 'utils/hooks'\nimport { addToCalendar, checkCalendarPermission, requestCalendarPermission } from 'utils/rnCalendar'\n\nimport Box from './Box'\nimport TextView, { ColorVariant, TextViewProps } from './TextView'\nimport VAIcon, { VA_ICON_MAP } from './VAIcon'\n\n/** Icon type for links, defaults to Chat */\nexport enum LinkUrlIconType {\n  /** Signifies icon with chat bubbles */\n  Chat = 'Chat',\n  /** Signifies icon with right pointing arrow */\n  Arrow = 'Arrow',\n}\n\nexport const LinkTypeOptionsConstants: {\n  text: LinkTypeOptions\n  call: LinkTypeOptions\n  callTTY: LinkTypeOptions\n  url: LinkTypeOptions\n  calendar: LinkTypeOptions\n  directions: LinkTypeOptions\n  externalLink: LinkTypeOptions\n} = {\n  text: 'text',\n  call: 'call',\n  callTTY: 'callTTY',\n  url: 'url',\n  calendar: 'calendar',\n  directions: 'directions',\n  externalLink: 'externalLink',\n}\ntype LinkTypeOptions = 'text' | 'call' | 'callTTY' | 'url' | 'calendar' | 'directions' | 'externalLink'\n\nexport type CalendarMetaData = {\n  title: string\n  startTime: number\n  endTime: number\n  location: string\n  latitude: number\n  longitude: number\n}\n\nexport type ActionLinkMetaData = CalendarMetaData\n\n/**\n *  Signifies the props that need to be passed in to {@link ClickForActionLink}\n */\nexport type LinkButtonProps = AccessibilityProps & {\n  /** phone number or text for url that is displayed to the user, may be different than actual number or url used */\n  displayedText: string\n\n  /** string signifying the type of link it is (click to call/text/go to website/add to calendar) */\n  linkType: LinkTypeOptions\n\n  /** signifies actual link or number used for link, may be different than text displayed */\n  numberOrUrlLink?: string\n\n  /** signifies icon type of link */\n  linkUrlIconType?: LinkUrlIconType\n\n  /** object with additional data needed to perform the given action */\n  metaData?: ActionLinkMetaData\n\n  /** Accessibility label for the link, mandatory for every element with a link role */\n  a11yLabel: string\n\n  /** optional function to fire analytic events when the link is clicked */\n  fireAnalytic?: () => void\n  /** color bypass */\n  colorOverride?: string\n  /** Optional TestID */\n  testID?: string\n}\n\n/**\n * Reusable component used for opening native calling app, texting app, or opening a url in the browser\n */\nconst ClickForActionLink: FC<LinkButtonProps> = ({\n  displayedText,\n  linkType,\n  numberOrUrlLink,\n  linkUrlIconType,\n  metaData,\n  a11yLabel,\n  fireAnalytic,\n  colorOverride,\n  testID,\n  ...props\n}) => {\n  const theme = useTheme()\n  const launchExternalLink = useExternalLink()\n\n  const onCalendarPress = async (): Promise<void> => {\n    const { title, endTime, startTime, location, latitude, longitude } = metaData as ActionLinkMetaData\n\n    let hasPermission = await checkCalendarPermission()\n    if (!hasPermission) {\n      hasPermission = await requestCalendarPermission()\n    }\n\n    if (hasPermission) {\n      await addToCalendar(title, startTime, endTime, location, latitude, longitude)\n    }\n  }\n\n  const _onPress = async (): Promise<void> => {\n    if (fireAnalytic) {\n      fireAnalytic()\n    }\n\n    if (linkType === LinkTypeOptionsConstants.calendar) {\n      await onCalendarPress()\n      return\n    }\n\n    let openUrlText = numberOrUrlLink || ''\n    if (linkType === LinkTypeOptionsConstants.call || linkType === LinkTypeOptionsConstants.callTTY) {\n      openUrlText = `tel:${numberOrUrlLink}`\n    } else if (linkType === LinkTypeOptionsConstants.text) {\n      openUrlText = `sms:${numberOrUrlLink}`\n    }\n\n    // ex. numbers: tel:${8008271000}, sms:${8008271000} (number must have no dashes)\n    // ex. url: https://google.com (need https for url)\n    launchExternalLink(openUrlText)\n  }\n\n  const getUrlIcon = (): keyof typeof VA_ICON_MAP => {\n    switch (linkUrlIconType) {\n      case LinkUrlIconType.Arrow:\n        return 'RightArrowInCircle'\n      default:\n        return 'Chat'\n    }\n  }\n\n  const getIconName = (): keyof typeof VA_ICON_MAP => {\n    switch (linkType) {\n      case 'call':\n        return 'CirclePhone'\n      case 'callTTY':\n        return 'PhoneTTY'\n      case 'text':\n        return 'Text'\n      case 'url':\n        return getUrlIcon()\n      case 'calendar':\n        return 'Calendar'\n      case 'directions':\n        return 'Directions'\n      case 'externalLink':\n        return 'CircleExternalLink'\n    }\n  }\n\n  const textViewProps: TextViewProps = {\n    color: colorOverride ? (colorOverride as ColorVariant) : 'link',\n    variant: 'MobileBody',\n    ml: 4,\n    textDecoration: 'underline',\n    textDecorationColor: colorOverride ? (colorOverride as ColorVariant) : 'link',\n  }\n\n  const pressableProps: TouchableWithoutFeedbackProps = {\n    onPress: _onPress,\n    accessibilityLabel: a11yLabel,\n    accessibilityRole: 'link',\n    accessible: true,\n    ...props,\n  }\n\n  return (\n    <TouchableWithoutFeedback testID={testID} {...pressableProps}>\n      <Box flexDirection={'row'} py={theme.dimensions.buttonPadding} alignItems={'center'}>\n        <VAIcon\n          name={getIconName()}\n          fill={colorOverride ? (colorOverride as ColorVariant) : 'link'}\n          fill2={colorOverride ? 'transparent' : ''}\n          width={25}\n          height={25}\n        />\n        <Box flexShrink={1}>\n          <TextView {...textViewProps}>{displayedText}</TextView>\n        </Box>\n      </Box>\n    </TouchableWithoutFeedback>\n  )\n}\n\nexport default ClickForActionLink\n";var l=t(32666);const r={title:"Link"},s=void 0,c={unversionedId:"Flagship design library/Components/Buttons and Links/ClickForActionLink",id:"Flagship design library/Components/Buttons and Links/ClickForActionLink",title:"Link",description:"A link is a navigation element that can appear alone, inline (embedded), or in a group with other links. A link can trigger a download, but in general links go to internal or external pages when clicked.",source:"@site/docs/Flagship design library/Components/Buttons and Links/ClickForActionLink.mdx",sourceDirName:"Flagship design library/Components/Buttons and Links",slug:"/Flagship design library/Components/Buttons and Links/ClickForActionLink",permalink:"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/ClickForActionLink",draft:!1,tags:[],version:"current",frontMatter:{title:"Link"},sidebar:"tutorialSidebar",previous:{title:"BackButton",permalink:"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/BackButton"},next:{title:"CtaButton",permalink:"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/CtaButton"}},p={},m=[{value:"Examples",id:"examples",level:2},{value:"Master component",id:"master-component",level:3},{value:"Examples",id:"examples-1",level:3},{value:"Usage",id:"usage",level:2},{value:"When to use Links",id:"when-to-use-links",level:3},{value:"When to consider something else",id:"when-to-consider-something-else",level:3},{value:"Behavior",id:"behavior",level:3},{value:"Choosing between variations",id:"choosing-between-variations",level:3},{value:"Content considerations",id:"content-considerations",level:2},{value:"Accessibility considerations",id:"accessibility-considerations",level:2},{value:"Related",id:"related",level:2},{value:"Code usage",id:"code-usage",level:2}],d="<CrisisLineCta onPress={onCrisisLine} />",u={toc:m,exampleString:d},k="wrapper";function h(e){let{components:n,...t}=e;return(0,a.kt)(k,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A link is a navigation element that can appear alone, inline (embedded), or in a group with other links. A link can trigger a download, but in general links go to internal or external pages when clicked."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"master-component"},"Master component"),(0,a.kt)("iframe",{width:"800",height:"450",alt:"Image of master component in Figma showing light and dark mode",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/file/fHX24yGleQdlxXLujq2GRn/%5BNEW%5D-Link---%236869?type=design&node-id=235-732&mode=design&t=vrDLNn1qNqe6J3mm-4",title:"Image of master component in Figma showing light and dark mode",allowfullscreen:!0}),(0,a.kt)("h3",{id:"examples-1"},"Examples"),(0,a.kt)("iframe",{width:"800",height:"450",alt:"Image of component examples in Figma",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/file/fHX24yGleQdlxXLujq2GRn/%5BNEW%5D-Link---%236869?type=design&node-id=235-674&mode=design&t=vrDLNn1qNqe6J3mm-4",allowfullscreen:!0}),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"when-to-use-links"},"When to use Links"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Refer to the ",(0,a.kt)("a",{parentName:"li",href:"https://design.va.gov/components/link/#usage"},"VA Design System for usage guidance"))),(0,a.kt)("h3",{id:"when-to-consider-something-else"},"When to consider something else"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Use buttons for actions"),". Use a ",(0,a.kt)("a",{parentName:"li",href:"https://design.va.gov/components/button"},"Button")," when you want to make a state change or submit a form. Example actions include, but are not limited to, \u201cAdd\u201d, \u201cClose\u201d, \u201cCancel\u201d, or \u201cSave\u201d. Buttons ",(0,a.kt)("strong",{parentName:"li"},"do things"),", links ",(0,a.kt)("strong",{parentName:"li"},"go places"),". Refer to guidance on ",(0,a.kt)("a",{parentName:"li",href:"https://design.va.gov/components/link/action#links-vs-buttons"},"Links vs. buttons")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Use action links for calls-to-action"),". On the website, when you want to draw attention to an important call-to-action (CTA) on the page, such as a link that launches a benefit application, use an ",(0,a.kt)("a",{parentName:"li",href:"https://design.va.gov/components/link/action"},"Action link"),". Calls-to-action are not actions themselves (see the previous point). On the mobile app, use a Link or Button component instead."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Table of contents"),". On the website, when you want to make a long page of content with two or more H2s easier to navigate, use an ",(0,a.kt)("a",{parentName:"li",href:"https://design.va.gov/components/on-this-page"},"On this page link"),". On the mobile app, avoid long pages of content that might require a table of contents."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Triggering the generation of a PDF"),". When using for a PDF, use only for linking directly to a PDF, not as a trigger for a process that generates a PDF. For ",(0,a.kt)("a",{parentName:"li",href:"https://design.va.gov/components/link/#links-vs-buttons"},"generating a PDF, use a button"),".")),(0,a.kt)("h3",{id:"behavior"},"Behavior"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"On the website"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Open VA.gov links in the same window except in certain instances"),". VA.gov links should open in a new tab only if clicking the link will result in the user losing progress or data. Otherwise, links should open in the same window. See ",(0,a.kt)("a",{parentName:"li",href:"https://design.va.gov/content-style-guide/links/#linking-to-external-sites"},"linking to external sites")," in the content style guide for additional information."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Use semantically appropriate encodings"),". Encode email and phone links with mailto: and tel:, respectively."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"On the mobile app"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Links open in the app"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Links open in a full panel")," if the content is within the app."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Links open in a webview")," if the content is not within the app and the user does not need a separate sign in to access the content."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Links open another app"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Links open in the browser app")," if the user needs to sign in to access the content. When leaving the app, always use a native alert to warn the user."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Links launch another app")," if the user is taking an action such as making a phone call, getting directions, or downloading a file. When leaving the app, always use a ",(0,a.kt)("a",{parentName:"li",href:"https://department-of-veterans-affairs.github.io/va-mobile-app/docs/Flagship%20design%20library/Patterns/confirmation-messages"},"confirmation message")," (native alert or action sheet) to warn the user.")))))),(0,a.kt)("h3",{id:"choosing-between-variations"},"Choosing between variations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Choosing between usage types"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Links may be used as ",(0,a.kt)("strong",{parentName:"li"},"standalone components")," or ",(0,a.kt)("strong",{parentName:"li"},"inline links"),"."),(0,a.kt)("li",{parentName:"ul"},"If used as an inline link, select the \u201cinline\u201d variation to ensure the height of the link matches the height of the body copy."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Choosing between colors"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"In most cases, use the ",(0,a.kt)("strong",{parentName:"li"},"default (blue)")," color."),(0,a.kt)("li",{parentName:"ul"},"If the default (blue) color will not work (i.e. insufficient color contrast), you may use the ",(0,a.kt)("strong",{parentName:"li"},"base (gray)")," link.")))),(0,a.kt)("h2",{id:"content-considerations"},"Content considerations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Refer to the ",(0,a.kt)("a",{parentName:"li",href:"https://design.va.gov/components/link/#content-considerations"},"VA Design System for content considerations")),(0,a.kt)("li",{parentName:"ul"},"When linking Veterans to VA.gov, be sure to include VA.gov in the link text. For example, instead of saying \u201cLearn more about benefits,\u201d it\u2019s better to say \u201cLearn more about benefits on VA.gov\u201d.")),(0,a.kt)("h2",{id:"accessibility-considerations"},"Accessibility considerations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Refer to the ",(0,a.kt)("a",{parentName:"li",href:"https://design.va.gov/components/link/#accessibility-considerations"},"VA Design System for accessibility considerations"))),(0,a.kt)("h2",{id:"related"},"Related"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://design.va.gov/components/link/"},"Link - VA Design System")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://designsystem.digital.gov/components/link/"},"Link - USWDS"))),(0,a.kt)("h2",{id:"code-usage"},"Code usage"),(0,a.kt)("p",null,"Link is related to ClickToCallPhoneNumber and AttachmentLink."),(0,a.kt)(l.Z,{componentName:"ClickForActionLink",example:d,codeString:o,mdxType:"ComponentTopInfo"}))}h.isMDXComponent=!0}}]);