"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3165],{83948:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=r(58168),n=(r(96540),r(15680));r(41873);const a={},o="Updating or Adding to an Existing Feature State",s={unversionedId:"Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature",id:"Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature",title:"Updating or Adding to an Existing Feature State",description:"Intro",source:"@site/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature.md",sourceDirName:"Engineering/FrontEnd/ReduxToolkit/Tutorials",slug:"/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add a New Feature State",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit"},next:{title:"Development Best Practices",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/DevelopmentBestPractices"}},c={},l=[{value:"Intro",id:"intro",level:2},{value:"Adding a New State",id:"adding-a-new-state",level:2}],p={toc:l},d="wrapper";function y(e){let{components:t,...r}=e;return(0,n.yg)(d,(0,i.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"updating-or-adding-to-an-existing-feature-state"},"Updating or Adding to an Existing Feature State"),(0,n.yg)("h2",{id:"intro"},"Intro"),(0,n.yg)("p",null,"This tutorial will consists of adding state to an existing feature state. "),(0,n.yg)("h2",{id:"adding-a-new-state"},"Adding a New State"),(0,n.yg)("p",null,"Here we are going to add a new reducer to clear the data on logout to the existing militaryServiceSlice.ts."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Current Slice Code")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/src/store/slices/militaryServiceSlice.ts"',title:'"/src/store/slices/militaryServiceSlice.ts"'},"import { PayloadAction, createSlice } from '@reduxjs/toolkit'\n\nimport * as api from 'store/api'\nimport { AppThunk } from 'store'\nimport { ScreenIDTypes, ServiceData } from '../api'\nimport { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice'\nimport { getCommonErrorFromAPIError } from 'utils/errors'\nimport { getDateFromString } from 'utils/formattingUtils'\nimport { isErrorObject } from 'utils/common'\nimport { max } from 'underscore'\n\nexport type MilitaryServiceState = {\n  serviceHistory: api.ServiceHistoryData\n  loading: boolean\n  error?: Error\n  mostRecentBranch?: string\n  needsDataLoad: boolean\n  preloadComplete: boolean\n}\n\nexport const initialMilitaryServiceState: MilitaryServiceState = {\n  serviceHistory: [] as api.ServiceHistoryData,\n  loading: false,\n  needsDataLoad: true,\n  preloadComplete: false,\n}\n\n/**\n * Redux action to get service history for user\n */\nexport const getServiceHistory =\n  (screenID?: ScreenIDTypes): AppThunk =>\n  async (dispatch) => {\n    dispatch(dispatchClearErrors(screenID))\n    dispatch(dispatchSetTryAgainFunction(() => dispatch(getServiceHistory(screenID))))\n\n    try {\n      dispatch(dispatchStartGetHistory())\n      const mshData = await api.get<api.MilitaryServiceHistoryData>('/v0/military-service-history')\n\n      dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory }))\n    } catch (error) {\n      if (isErrorObject(error)) {\n        dispatch(dispatchFinishGetHistory({ error }))\n        dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID }))\n      }\n    }\n  }\n\n/**\n * Redux slice that will create the actions and reducers\n */\nconst militaryServiceSlice = createSlice({\n  name: 'militaryService',\n  initialState: initialMilitaryServiceState,\n  reducers: {\n    dispatchStartGetHistory: (state) => {\n      state.loading = true\n    },\n\n    dispatchFinishGetHistory: (state, action: PayloadAction<{ serviceHistory?: api.ServiceHistoryData; error?: Error }>) => {\n      const { serviceHistory, error } = action.payload\n      const history = serviceHistory || state.serviceHistory\n\n      const latestHistory = max(history, (historyItem) => {\n        return getDateFromString(historyItem.endDate)\n      }) as ServiceData\n\n      return {\n        ...state,\n        error,\n        mostRecentBranch: latestHistory?.branchOfService,\n        serviceHistory: history,\n        loading: false,\n        needsDataLoad: !!error,\n        preloadComplete: true,\n      }\n    },\n  },\n})\n\nexport const { dispatchFinishGetHistory, dispatchStartGetHistory } = militaryServiceSlice.actions\nexport default militaryServiceSlice.reducer\n")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Code after adding the logout reducer")),(0,n.yg)("p",null,"Here we added the ",(0,n.yg)("strong",{parentName:"p"},"dispatchMilitaryHistoryLogout")," reducer function which we will extract an action to be dispatch on the logout Redux thunk."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/src/store/slices/militaryServiceSlice.ts"',title:'"/src/store/slices/militaryServiceSlice.ts"'},"import { PayloadAction, createSlice } from '@reduxjs/toolkit'\n\nimport * as api from 'store/api'\nimport { AppThunk } from 'store'\nimport { ScreenIDTypes, ServiceData } from '../api'\nimport { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice'\nimport { getCommonErrorFromAPIError } from 'utils/errors'\nimport { getDateFromString } from 'utils/formattingUtils'\nimport { isErrorObject } from 'utils/common'\nimport { max } from 'underscore'\n\nexport type MilitaryServiceState = {\n  serviceHistory: api.ServiceHistoryData\n  loading: boolean\n  error?: Error\n  mostRecentBranch?: string\n  needsDataLoad: boolean\n  preloadComplete: boolean\n}\n\nexport const initialMilitaryServiceState: MilitaryServiceState = {\n  serviceHistory: [] as api.ServiceHistoryData,\n  loading: false,\n  needsDataLoad: true,\n  preloadComplete: false,\n}\n\n/**\n * Redux action to get service history for user\n */\nexport const getServiceHistory =\n  (screenID?: ScreenIDTypes): AppThunk =>\n  async (dispatch) => {\n    dispatch(dispatchClearErrors(screenID))\n    dispatch(dispatchSetTryAgainFunction(() => dispatch(getServiceHistory(screenID))))\n\n    try {\n      dispatch(dispatchStartGetHistory())\n      const mshData = await api.get<api.MilitaryServiceHistoryData>('/v0/military-service-history')\n\n      dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory }))\n    } catch (error) {\n      if (isErrorObject(error)) {\n        dispatch(dispatchFinishGetHistory({ error }))\n        dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID }))\n      }\n    }\n  }\n\n/**\n * Redux slice that will create the actions and reducers\n */\nconst militaryServiceSlice = createSlice({\n  name: 'militaryService',\n  initialState: initialMilitaryServiceState,\n  reducers: {\n    dispatchStartGetHistory: (state) => {\n      state.loading = true\n    },\n\n    dispatchFinishGetHistory: (state, action: PayloadAction<{ serviceHistory?: api.ServiceHistoryData; error?: Error }>) => {\n      const { serviceHistory, error } = action.payload\n      const history = serviceHistory || state.serviceHistory\n\n      const latestHistory = max(history, (historyItem) => {\n        return getDateFromString(historyItem.endDate)\n      }) as ServiceData\n\n      return {\n        ...state,\n        error,\n        mostRecentBranch: latestHistory?.branchOfService,\n        serviceHistory: history,\n        loading: false,\n        needsDataLoad: !!error,\n        preloadComplete: true,\n      }\n    },\n\n     dispatchMilitaryHistoryLogout: () => {\n      return {\n        ...initialMilitaryServiceState,\n      }\n    },\n\n  },\n})\n\nexport const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions\nexport default militaryServiceSlice.reducer\n")),(0,n.yg)("p",null,"That is all it takes to add a new state to an existing slice file. Now the ",(0,n.yg)("strong",{parentName:"p"},"dispatchMilitaryHistoryLogout")," could be imported to any file and be dispatched."))}y.isMDXComponent=!0},15680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>m});var i=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=i.createContext({}),l=function(e){var t=i.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(r),u=n,m=d["".concat(c,".").concat(u)]||d[u]||y[u]||a;return r?i.createElement(m,o(o({ref:t},p),{},{components:r})):i.createElement(m,o({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:n,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}u.displayName="MDXCreateElement"},41873:(e,t,r)=>{r(96540)}}]);