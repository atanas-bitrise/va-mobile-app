"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9274],{7644:(e,t,n)=>{n.d(t,{A:()=>p});var i=n(96540),s=n(54610),l=n(3384),o=n(31347),a=n(28057),r=n(84476);const m=e=>{let{props:t}=e;return t?i.createElement(i.Fragment,null,r.Ay.isEmpty(t)?i.createElement("pre",{className:"preText"},"This component does not have props defined"):i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Name"),i.createElement("th",null,"Type"),i.createElement("th",null,"Default Value"),i.createElement("th",null,"Required"),i.createElement("th",null,"Description"))),i.createElement("tbody",null,Object.keys(t).map((e=>i.createElement("tr",{key:e},i.createElement("td",null,i.createElement("code",null,e)),i.createElement("td",{style:{minWidth:200}},t[e].type?.name),i.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),i.createElement("td",null,t[e].required?"Yes":"No"),i.createElement("td",null,t[e].description))))))):null};function p(e){const t=(0,a.d)(e.componentName),{description:n,displayName:r,props:p}=t[0],c=`How to use the ${r} component`,d=`Full code for the ${r} component`;return i.createElement(i.Fragment,null,n,i.createElement("br",null),i.createElement("br",null),i.createElement(l.A,null,i.createElement(o.A,{value:"props",label:"Properties"},i.createElement(m,{props:p})),i.createElement(o.A,{value:"example",label:"Example"},e.example&&i.createElement(s.A,{title:c,className:"language-tsx test"},e.example)),i.createElement(o.A,{value:"code",label:"Source Code"},e.codeString&&i.createElement(s.A,{title:d,className:"language-tsx"},e.codeString)),i.createElement(o.A,{value:"accessibility",label:"Accessibility"},i.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,t,n)=>{n.d(t,{d:()=>s});var i=n(2736);const s=e=>(0,i.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},90780:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>b,exampleString:()=>d,frontMatter:()=>a,metadata:()=>m,toc:()=>c});var i=n(58168),s=(n(96540),n(15680));n(41873),n(54610);const l="import React, { FC } from 'react'\n\nimport { generateTestIDForTextList } from 'utils/common'\n\nimport { TextLines } from './TextLines'\nimport { List, ListItemObj, ListProps } from './index'\nimport { TextLine } from './types'\n\n/**\n * Signifies each item in the list of items in {@link SimpleListProps}\n */\nexport type SimpleListItemObj = {\n  /** lines of text to display */\n  text: string\n} & Partial<ListItemObj>\n\n/**\n * Props for {@link SimpleList}\n */\nexport type SimpleListProps = {\n  items: Array<SimpleListItemObj>\n} & Partial<ListProps>\n\n/**Component to show a list with one line of text per item*/\nconst SimpleList: FC<SimpleListProps> = ({ items, title, titleA11yLabel }) => {\n  const listItemObjs: Array<ListItemObj> = items.map((item: SimpleListItemObj) => {\n    // Move all of the properties except text lines to the standard list item object\n    const { text, testId, detoxTestID, ...listItemObj } = { ...item }\n\n    const textLine: Array<TextLine> = [{ text } as TextLine]\n\n    const testIdToUse = testId ? testId : generateTestIDForTextList(textLine)\n    const content = <TextLines listOfText={textLine} />\n    const detoxTestIDToUse = detoxTestID ? detoxTestID : testIdToUse\n\n    return { ...listItemObj, content, testId: testIdToUse, detoxTestID: detoxTestIDToUse }\n  })\n\n  return <List items={listItemObjs} title={title} titleA11yLabel={titleA11yLabel} />\n}\n\nexport default SimpleList\n";var o=n(7644);const a={},r=void 0,m={unversionedId:"Flagship design library/Components/Layout and Organization/List/SimpleList",id:"Flagship design library/Components/Layout and Organization/List/SimpleList",title:"SimpleList",description:"",source:"@site/docs/Flagship design library/Components/Layout and Organization/List/SimpleList.mdx",sourceDirName:"Flagship design library/Components/Layout and Organization/List",slug:"/Flagship design library/Components/Layout and Organization/List/SimpleList",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/SimpleList",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SelectionList",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/SelectionList"},next:{title:"Multi-touch card",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard"}},p={},c=[],d="const exampleList: Array<SimpleListItemObj> = \n[\n    {\n      text: 'the button',\n      a11yHintText: 'press this button to do something',\n      onPress: () => { console.log('button 1 pressed') },\n      testId: 'line-1-on-the-button',\n    },\n    {\n      text: 'the second button',\n      a11yHintText: 'press this button to do something',\n      onPress: () => { console.log('button 2 pressed') },\n      testId: 'line-1-on-the-second-button',\n    },\n]\n\n<SimpleList items={exampleList} />",u={toc:c,exampleString:d},L="wrapper";function b(e){let{components:t,...n}=e;return(0,s.yg)(L,(0,i.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.yg)(o.A,{componentName:"SimpleList",example:d,codeString:l,mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);