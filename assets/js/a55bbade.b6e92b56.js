"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3342],{7644:(e,t,n)=>{n.d(t,{A:()=>c});var o=n(96540),a=n(54610),r=n(3384),s=n(31347),i=n(28057),l=n(84476);const m=e=>{let{props:t}=e;return t?o.createElement(o.Fragment,null,l.Ay.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((e=>o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},t[e].type?.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))))))):null};function c(e){const t=(0,i.d)(e.componentName),{description:n,displayName:l,props:c}=t[0],p=`How to use the ${l} component`,d=`Full code for the ${l} component`;return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(r.A,null,o.createElement(s.A,{value:"props",label:"Properties"},o.createElement(m,{props:c})),o.createElement(s.A,{value:"example",label:"Example"},e.example&&o.createElement(a.A,{title:p,className:"language-tsx test"},e.example)),o.createElement(s.A,{value:"code",label:"Source Code"},e.codeString&&o.createElement(a.A,{title:d,className:"language-tsx"},e.codeString)),o.createElement(s.A,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,t,n)=>{n.d(t,{d:()=>a});var o=n(2736);const a=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},62106:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>b,exampleString:()=>d,frontMatter:()=>i,metadata:()=>m,toc:()=>p});var o=n(58168),a=(n(96540),n(15680));n(41873),n(54610);const r="import React, { FC, ReactNode } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { ImagePickerResponse } from 'react-native-image-picker/src/types'\n\nimport { Button, ButtonVariants, Icon } from '@department-of-veterans-affairs/mobile-component-library'\nimport _ from 'underscore'\n\nimport { Box, TextView } from 'components/index'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { DocumentPickerResponse } from 'screens/BenefitsScreen/BenefitsStackScreens'\nimport { getFileDisplay } from 'utils/common'\nimport { useTheme } from 'utils/hooks'\n\nexport type FormAttachmentsProps = {\n  /** callback called on click of remove link for an attachment */\n  removeOnPress?: (attachment: ImagePickerResponse | DocumentPickerResponse) => void\n  /**button label */\n  buttonLabel?: string\n  /**button onPress */\n  buttonPress?: () => void\n  /** optional TestID */\n  testID?: string\n  /** list of current attachments */\n  attachmentsList?: Array<ImagePickerResponse | DocumentPickerResponse>\n}\n\n/** A common component for form attachments, displays Attachments heading with helper link,\n * already attached items with remove option, and an optional large button. */\nconst FormAttachments: FC<FormAttachmentsProps> = ({\n  removeOnPress,\n  buttonLabel,\n  buttonPress,\n  testID,\n  attachmentsList,\n}) => {\n  const theme = useTheme()\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const { t: tFunction } = useTranslation()\n\n  const renderFileNames = (): ReactNode => {\n    return _.map(attachmentsList || [], (attachment, index) => {\n      const { fileName, fileSize: formattedFileSize, fileSizeA11y } = getFileDisplay(attachment, tFunction, true)\n      const text = [fileName, formattedFileSize].join(' ').trim()\n\n      return (\n        <Box key={index}>\n          <Box\n            flexDirection={'row'}\n            mr={theme.dimensions.gutter}\n            mt={index !== 0 ? theme.dimensions.condensedMarginBetween : 0}\n            mb={theme.dimensions.condensedMarginBetween}>\n            <Box mt={theme.dimensions.attachmentIconTopMargin} mr={theme.dimensions.textIconMargin}>\n              <Icon name=\"AttachFile\" width={20} height={20} fill={theme.colors.icon.spinner} />\n            </Box>\n            <TextView\n              variant=\"MobileBodyBold\"\n              ml={theme.dimensions.textIconMargin}\n              accessibilityLabel={fileSizeA11y ? [fileName, fileSizeA11y].join(' ').trim() : undefined}>\n              {text}\n            </TextView>\n          </Box>\n          <Button\n            onPress={() => removeOnPress?.(attachment)}\n            label={t('remove')}\n            a11yHint={t('remove.a11yHint', { content: fileName })}\n            buttonType={ButtonVariants.Destructive}\n            testID={testID}\n          />\n        </Box>\n      )\n    })\n  }\n\n  const attachmentsDoNotExist = !attachmentsList || attachmentsList.length === 0\n\n  return (\n    <Box>\n      <TextView>{t('attachments')}</TextView>\n      <Box\n        mt={theme.dimensions.standardMarginBetween}\n        mb={attachmentsDoNotExist ? 0 : theme.dimensions.standardMarginBetween}>\n        {renderFileNames()}\n      </Box>\n      {buttonLabel && buttonPress && (\n        <Button\n          label={buttonLabel}\n          onPress={buttonPress}\n          buttonType={ButtonVariants.Secondary}\n          a11yLabel={buttonLabel}\n          testID={testID}\n        />\n      )}\n    </Box>\n  )\n}\n\nexport default FormAttachments\n";var s=n(7644);const i={},l=void 0,m={unversionedId:"Flagship design library/Components/Selection and Input/Form Elements/FormAttachments",id:"Flagship design library/Components/Selection and Input/Form Elements/FormAttachments",title:"FormAttachments",description:"",source:"@site/docs/Flagship design library/Components/Selection and Input/Form Elements/FormAttachments.mdx",sourceDirName:"Flagship design library/Components/Selection and Input/Form Elements",slug:"/Flagship design library/Components/Selection and Input/Form Elements/FormAttachments",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/FormAttachments",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Checkbox",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/Checkbox"},next:{title:"FormWrapper",permalink:"/va-mobile-app/docs/Flagship design library/Components/Selection and Input/Form Elements/FormWrapper"}},c={},p=[],d="<FormAttachments \nattachmentsList={[ { name: 'file.txt' }, { fileName: 'image.jpeg' } ]} \nremoveOnPress={() => {}} \nlargeButtonProps={{ label: 'add files', onPress: () => {} }} />",u={toc:p,exampleString:d},h="wrapper";function b(e){let{components:t,...n}=e;return(0,a.yg)(h,(0,o.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)(s.A,{componentName:"FormAttachments",example:d,codeString:r,mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);