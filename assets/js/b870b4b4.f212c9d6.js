"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1864],{7644:(e,t,n)=>{n.d(t,{A:()=>c});var o=n(96540),i=n(54610),a=n(3384),l=n(31347),r=n(28057),s=n(84476);const m=e=>{let{props:t}=e;return t?o.createElement(o.Fragment,null,s.Ay.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((e=>o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},t[e].type?.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))))))):null};function c(e){const t=(0,r.d)(e.componentName),{description:n,displayName:s,props:c}=t[0],d=`How to use the ${s} component`,u=`Full code for the ${s} component`;return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(a.A,null,o.createElement(l.A,{value:"props",label:"Properties"},o.createElement(m,{props:c})),o.createElement(l.A,{value:"example",label:"Example"},e.example&&o.createElement(i.A,{title:d,className:"language-tsx test"},e.example)),o.createElement(l.A,{value:"code",label:"Source Code"},e.codeString&&o.createElement(i.A,{title:u,className:"language-tsx"},e.codeString)),o.createElement(l.A,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},28057:(e,t,n)=>{n.d(t,{d:()=>i});var o=n(2736);const i=e=>(0,o.Ay)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},49087:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>b,exampleString:()=>u,frontMatter:()=>r,metadata:()=>m,toc:()=>d});var o=n(58168),i=(n(96540),n(15680)),a=(n(41873),n(54610),n(7644));const l="import React, { FC, ReactElement } from 'react'\nimport { Pressable, PressableProps } from 'react-native'\n\nimport { HiddenA11yElement } from 'styles/common'\nimport { useTheme } from 'utils/hooks'\n\nimport Box, { BoxProps } from './Box'\n\nexport type MultiTouchCardProps = {\n  /** read by screen readers to identify the cards place in a list */\n  orderIdentifier?: string\n  /** accessibility label for the main section */\n  mainA11yLabel?: string\n  /** content to display in the main section */\n  mainContent: ReactElement\n  /** called when the bottom button is pressed */\n  bottomOnPress?: () => void\n  /** content to display in the bottom button */\n  bottomContent?: ReactElement\n  /** hint for the bottom button action */\n  bottomA11yHint?: string\n  /** accessibility label for the bottom section */\n  bottomA11yLabel?: string\n}\n\nconst MultiTouchCard: FC<MultiTouchCardProps> = ({\n  orderIdentifier,\n  mainContent,\n  bottomContent,\n  bottomOnPress,\n  bottomA11yHint,\n  mainA11yLabel,\n  bottomA11yLabel,\n}) => {\n  const theme = useTheme()\n\n  const hasBottomContent = !!bottomContent\n\n  const background = 'list'\n\n  let mainBoxProps: BoxProps = {\n    width: '100%',\n    minHeight: theme.dimensions.touchableMinHeight,\n    py: theme.dimensions.buttonPadding,\n    px: theme.dimensions.gutter,\n    borderWidth: theme.dimensions.borderWidth,\n    borderColor: 'primary',\n    borderStyle: 'solid',\n    backgroundColor: background,\n    borderRadiusTop: 8,\n    borderRadiusBottom: hasBottomContent ? 0 : 8,\n  }\n\n  if (mainA11yLabel) {\n    mainBoxProps = { ...mainBoxProps, accessibilityLabel: mainA11yLabel }\n  }\n\n  let bottomPressableProps: PressableProps = {\n    onPress: bottomOnPress,\n    accessible: true,\n    accessibilityRole: 'button',\n    accessibilityHint: bottomA11yHint,\n  }\n\n  let bottomBoxProps: BoxProps = {\n    py: theme.dimensions.buttonPadding,\n    px: theme.dimensions.gutter,\n    backgroundColor: background,\n    borderRadiusBottom: 8,\n    borderTopWidth: 0,\n    borderWidth: theme.dimensions.borderWidth,\n    borderColor: 'primary',\n    borderStyle: 'solid',\n  }\n\n  const getBottomContent = () => {\n    if (bottomOnPress) {\n      if (bottomA11yLabel) {\n        bottomPressableProps = { ...mainBoxProps, accessibilityLabel: bottomA11yLabel }\n      }\n\n      return (\n        <Pressable {...bottomPressableProps}>\n          <Box {...bottomBoxProps}>{bottomContent}</Box>\n        </Pressable>\n      )\n    } else {\n      if (bottomA11yLabel) {\n        bottomBoxProps = { ...mainBoxProps, accessibilityLabel: bottomA11yLabel }\n      }\n\n      return <Box {...bottomBoxProps}>{bottomContent}</Box>\n    }\n  }\n\n  return (\n    <>\n      {orderIdentifier && <HiddenA11yElement accessibilityLabel={orderIdentifier}>{orderIdentifier}</HiddenA11yElement>}\n      <Box {...mainBoxProps}>{mainContent}</Box>\n      {hasBottomContent && getBottomContent()}\n    </>\n  )\n}\n\nexport default MultiTouchCard\n",r={title:"Multi-touch card"},s=void 0,m={unversionedId:"Flagship design library/Components/Layout and Organization/MultiTouchCard",id:"Flagship design library/Components/Layout and Organization/MultiTouchCard",title:"Multi-touch card",description:"The multi-touch card provides multiple touch targets on a list item.",source:"@site/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard.mdx",sourceDirName:"Flagship design library/Components/Layout and Organization",slug:"/Flagship design library/Components/Layout and Organization/MultiTouchCard",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/MultiTouchCard",draft:!1,tags:[],version:"current",frontMatter:{title:"Multi-touch card"},sidebar:"tutorialSidebar",previous:{title:"SimpleList",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/List/SimpleList"},next:{title:"Nametag",permalink:"/va-mobile-app/docs/Flagship design library/Components/Layout and Organization/Nametag"}},c={},d=[{value:"Examples",id:"examples",level:2},{value:"Default",id:"default",level:3},{value:"Variations",id:"variations",level:3},{value:"Usage",id:"usage",level:2},{value:"When to use Multi-touch card",id:"when-to-use-multi-touch-card",level:3},{value:"How this component works",id:"how-this-component-works",level:3},{value:"Instances of this component in production",id:"instances-of-this-component-in-production",level:3},{value:"Accessibility considerations",id:"accessibility-considerations",level:2},{value:"Code usage",id:"code-usage",level:2}],u="<CrisisLineCta onPress={onCrisisLine} />",p={toc:d,exampleString:u},h="wrapper";function b(e){let{components:t,...n}=e;return(0,i.yg)(h,(0,o.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"The multi-touch card provides multiple touch targets on a list item."),(0,i.yg)("h2",{id:"examples"},"Examples"),(0,i.yg)("h3",{id:"default"},"Default"),(0,i.yg)("iframe",{width:"800",height:"450",alt:"Image of master component in Figma showing light and dark mode",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/file/QVLPB3eOunmKrgQOuOt0SU/%F0%9F%93%90-DesignLibrary2.0---VAMobile?type=design&node-id=9097-30010&mode=design&t=GYfUoRF9YkczEweR-4",allowfullscreen:!0}),(0,i.yg)("h3",{id:"variations"},"Variations"),(0,i.yg)("iframe",{width:"800",height:"450",alt:"Image of component examples in Figma",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com/file/QVLPB3eOunmKrgQOuOt0SU/%F0%9F%93%90-DesignLibrary2.0---VAMobile?type=design&node-id=9118-30720&mode=design&t=GYfUoRF9YkczEweR-4",allowfullscreen:!0}),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("h3",{id:"when-to-use-multi-touch-card"},"When to use Multi-touch card"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The component should be used when a list item includes a lot of data and requires 2-3 touch targets. ")),(0,i.yg)("h3",{id:"how-this-component-works"},"How this component works"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Component should use established color patterns.")),(0,i.yg)("h3",{id:"instances-of-this-component-in-production"},"Instances of this component in production"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Prescriptions")),(0,i.yg)("h2",{id:"accessibility-considerations"},"Accessibility considerations"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The card's type and place in the list (ex. prescription 1 of 1) should be called out first by the screen reader. The screen reader should call out each individual touch target by its respective type (button, link; etc) along with its respective a11y hint. "),(0,i.yg)("li",{parentName:"ul"},"Keyboards and Voice Access/Voice Control should navigate through each line item separately "),(0,i.yg)("li",{parentName:"ul"},"Keyboards and Voice Access/Voice Control should navigate each touch area separately "),(0,i.yg)("li",{parentName:"ul"},"Touch target UI should have clear and distinguishable areas/borders")),(0,i.yg)("h2",{id:"code-usage"},"Code usage"),(0,i.yg)(a.A,{componentName:"MultiTouchCard",example:u,codeString:l,mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);