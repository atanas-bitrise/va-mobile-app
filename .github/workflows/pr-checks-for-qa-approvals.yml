
#
# Checks if QA approvals are necessary, and if so runs the associated action when a new review is added
#

name: '[Utils] QA required approval'

on:
  pull_request:
    types: [opened, edited, converted_to_draft, ready_for_review, reopened]
    paths:
      - 'VAMobile/src/**'
      - 'VAMobile/package.json'
      - '!VAMobile/src/**.test.*'

  pull_request_review:
    types: [submitted, dismissed]

  pull_request_target:
    branches:
      - 'develop'
  push: 
    branches: 
      - 'chanel-6261-qa-approval-workflow'    

jobs:
  check_for_qa_approval:
    name: Check for QA Approval
    runs-on: ubuntu-latest
    steps:
      - name: Check PR Reviews and Required Approvals
        id: check_pr_reviews
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullRequestNumber = context.payload.pull_request ? context.payload.pull_request.number : null;
            if (!pullRequestNumber) {
              console.error('Pull request number is undefined.');
              process.exit(1);
            }

            const response = await github.request('GET /repos/:owner/:repo/pulls/:pull_number/reviews', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              per_page: 100
            });
            const reviews = response.data;
            const approvals = reviews.filter(review => review.state === 'APPROVED').map(review => review.user.login);
            const requiredApprovalCountResponse = await github.request('GET /repos/:owner/:repo/branches/:branch/protection', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'develop' // Update with your target branch
            });
            const requiredApprovalCount = requiredApprovalCountResponse.data.required_pull_request_reviews.required_approving_review_count;
            const qaTeamMembersResponse = await github.request('GET /orgs/:org/teams/:team/members', {
              org: 'department-of-veterans-affairs', // Update with your organization
              team: 'flagship-mobile-qa' // Update with your QA team
            });
            const qaTeamMembers = qaTeamMembersResponse.data.map(member => member.login);
            return JSON.stringify({
              approvals: approvals,
              requiredApprovalCount: requiredApprovalCount,
              qaTeamMembers: qaTeamMembers
            });
   
      - name: Check QA Approval
        run: |
          output=$(echo "${{ steps.check_pr_reviews.outputs.results }}" | jq -r .)
          approvals=$(echo "$output" | jq -r .approvals)
          required_approval_count=$(echo "$output" | jq -r .requiredApprovalCount)
          qa_team_members=$(echo "$output" | jq -r .qaTeamMembers)
          if [[ $(echo "$approvals" | jq -r 'length') -gt "$required_approval_count" ]]; then
            for user in $(echo "$qa_team_members"); do
              if [[ $(echo "$approvals" | jq -r 'contains(["'"$user"'"])') == true ]]; then
                echo 'This PR has QA approval to merge'
                exit 0
              fi
            done
            echo 'This PR requires QA approval to merge'
            exit 1
          else
            echo 'This PR requires 2 approvals, including one QA and one engineer, before merging.'
            exit 1
          fi
      